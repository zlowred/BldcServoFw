
test_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aec  08006aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006aec  08006aec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006aec  08006aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000070  08006b64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08006b64  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032df  00000000  00000000  00039771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000486d  00000000  00000000  0003f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016814  00000000  00000000  00043ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c17  00000000  00000000  0005a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c5c  00000000  00000000  0012e120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006a5c 	.word	0x08006a5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006a5c 	.word	0x08006a5c

08000220 <JumpToBootloader>:
/**
 * Function to perform jump to system memory boot from user application
 *
 * Call function when you want to jump to system memory
 */
void JumpToBootloader(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	void (*SysMemBootJump)(void);

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <JumpToBootloader+0x50>)
 8000228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <JumpToBootloader+0x50>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6613      	str	r3, [r2, #96]	; 0x60
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <JumpToBootloader+0x50>)
 8000234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <JumpToBootloader+0x54>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f023 0307 	bic.w	r3, r3, #7
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <JumpToBootloader+0x54>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]
//	SCB->VTOR = 0;

	SysMemBootJump = (void (*)(void)) (*((uint32_t*) (0x1FFF0004)));
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <JumpToBootloader+0x58>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	60fb      	str	r3, [r7, #12]
	__set_MSP(*(uint32_t*) (0x1FFF0000));
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <JumpToBootloader+0x5c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	f383 8808 	msr	MSP, r3
}
 8000260:	bf00      	nop

	SysMemBootJump();
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	4798      	blx	r3
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	40010000 	.word	0x40010000
 8000278:	1fff0004 	.word	0x1fff0004
 800027c:	1fff0000 	.word	0x1fff0000

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
//	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0xDEAD) {
//		HAL_PWR_EnableBkUpAccess();
//		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0);
//		HAL_PWR_DisableBkUpAccess();
//  __enable_irq();
	JumpToBootloader();
 8000284:	f7ff ffcc 	bl	8000220 <JumpToBootloader>
	while(1){}
 8000288:	e7fe      	b.n	8000288 <main+0x8>

0800028a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b094      	sub	sp, #80	; 0x50
 800028e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	2238      	movs	r2, #56	; 0x38
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f006 fbd7 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b0:	f001 fd58 	bl	8001d64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002b4:	2309      	movs	r3, #9
 80002b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c6:	2303      	movs	r3, #3
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80002ce:	2318      	movs	r3, #24
 80002d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80002d6:	2306      	movs	r3, #6
 80002d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002da:	2302      	movs	r3, #2
 80002dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fde2 	bl	8001eac <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002ee:	f000 f82d 	bl	800034c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2303      	movs	r3, #3
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2104      	movs	r1, #4
 800030a:	4618      	mov	r0, r3
 800030c:	f002 f8e6 	bl	80024dc <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000316:	f000 f819 	bl	800034c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800031a:	f002 fad1 	bl	80028c0 <HAL_RCC_EnableCSS>
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	; 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d101      	bne.n	800033e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800033a:	f000 f8e5 	bl	8000508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40012c00 	.word	0x40012c00

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>
	...

08000358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08c      	sub	sp, #48	; 0x30
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000368:	2300      	movs	r3, #0
 800036a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800036e:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <HAL_InitTick+0xcc>)
 8000370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000372:	4a2c      	ldr	r2, [pc, #176]	; (8000424 <HAL_InitTick+0xcc>)
 8000374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000378:	6613      	str	r3, [r2, #96]	; 0x60
 800037a:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <HAL_InitTick+0xcc>)
 800037c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800037e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000386:	f107 020c 	add.w	r2, r7, #12
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f002 fa63 	bl	800285c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000396:	f002 fa4b 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 800039a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800039c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <HAL_InitTick+0xd0>)
 80003a0:	fba2 2303 	umull	r2, r3, r2, r3
 80003a4:	0c9b      	lsrs	r3, r3, #18
 80003a6:	3b01      	subs	r3, #1
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <HAL_InitTick+0xd4>)
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <HAL_InitTick+0xd8>)
 80003ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <HAL_InitTick+0xd4>)
 80003b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80003b8:	4a1c      	ldr	r2, [pc, #112]	; (800042c <HAL_InitTick+0xd4>)
 80003ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <HAL_InitTick+0xd4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <HAL_InitTick+0xd4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <HAL_InitTick+0xd4>)
 80003cc:	f002 faea 	bl	80029a4 <HAL_TIM_Base_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80003d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d11b      	bne.n	8000416 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80003de:	4813      	ldr	r0, [pc, #76]	; (800042c <HAL_InitTick+0xd4>)
 80003e0:	f002 fb42 	bl	8002a68 <HAL_TIM_Base_Start_IT>
 80003e4:	4603      	mov	r3, r0
 80003e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80003ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d111      	bne.n	8000416 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80003f2:	2019      	movs	r0, #25
 80003f4:	f000 f949 	bl	800068a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b0f      	cmp	r3, #15
 80003fc:	d808      	bhi.n	8000410 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80003fe:	2200      	movs	r2, #0
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	2019      	movs	r0, #25
 8000404:	f000 f927 	bl	8000656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000408:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <HAL_InitTick+0xdc>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6013      	str	r3, [r2, #0]
 800040e:	e002      	b.n	8000416 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800041a:	4618      	mov	r0, r3
 800041c:	3730      	adds	r7, #48	; 0x30
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	431bde83 	.word	0x431bde83
 800042c:	2000008c 	.word	0x2000008c
 8000430:	40012c00 	.word	0x40012c00
 8000434:	20000004 	.word	0x20000004

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800043c:	f002 fa50 	bl	80028e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x8>

08000442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <MemManage_Handler+0x4>

0800044e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <BusFault_Handler+0x4>

08000454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler+0x4>

0800045a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <USB_LP_IRQHandler+0x10>)
 800046e:	f000 f91a 	bl	80006a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000056c 	.word	0x2000056c

0800047c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000482:	f002 fb5b 	bl	8002b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	2000008c 	.word	0x2000008c

08000490 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490e      	ldr	r1, [pc, #56]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0b      	ldr	r4, [pc, #44]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004de:	f7ff ffd7 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f006 fa8f 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004e6:	f7ff fecb 	bl	8000280 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80004f8:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 80004fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000500:	20000860 	.word	0x20000860

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_IncTick+0x1c>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_IncTick+0x20>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4413      	add	r3, r2
 8000516:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x1c>)
 8000518:	6013      	str	r3, [r2, #0]
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	200000d8 	.word	0x200000d8
 8000528:	20000008 	.word	0x20000008

0800052c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <HAL_GetTick+0x14>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000d8 	.word	0x200000d8

08000544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <__NVIC_GetPriorityGrouping+0x18>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	f003 0307 	and.w	r3, r3, #7
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db0b      	blt.n	800058a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f003 021f 	and.w	r2, r3, #31
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <__NVIC_EnableIRQ+0x38>)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	095b      	lsrs	r3, r3, #5
 8000580:	2001      	movs	r0, #1
 8000582:	fa00 f202 	lsl.w	r2, r0, r2
 8000586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000e100 	.word	0xe000e100

0800059c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db0a      	blt.n	80005c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	490c      	ldr	r1, [pc, #48]	; (80005e8 <__NVIC_SetPriority+0x4c>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	440b      	add	r3, r1
 80005c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c4:	e00a      	b.n	80005dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4908      	ldr	r1, [pc, #32]	; (80005ec <__NVIC_SetPriority+0x50>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	3b04      	subs	r3, #4
 80005d4:	0112      	lsls	r2, r2, #4
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	440b      	add	r3, r1
 80005da:	761a      	strb	r2, [r3, #24]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f1c3 0307 	rsb	r3, r3, #7
 800060a:	2b04      	cmp	r3, #4
 800060c:	bf28      	it	cs
 800060e:	2304      	movcs	r3, #4
 8000610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3304      	adds	r3, #4
 8000616:	2b06      	cmp	r3, #6
 8000618:	d902      	bls.n	8000620 <NVIC_EncodePriority+0x30>
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3b03      	subs	r3, #3
 800061e:	e000      	b.n	8000622 <NVIC_EncodePriority+0x32>
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	43da      	mvns	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	401a      	ands	r2, r3
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43d9      	mvns	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	4313      	orrs	r3, r2
         );
}
 800064a:	4618      	mov	r0, r3
 800064c:	3724      	adds	r7, #36	; 0x24
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000664:	f7ff ff6e 	bl	8000544 <__NVIC_GetPriorityGrouping>
 8000668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f7ff ffbe 	bl	80005f0 <NVIC_EncodePriority>
 8000674:	4602      	mov	r2, r0
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff8d 	bl	800059c <__NVIC_SetPriority>
}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff61 	bl	8000560 <__NVIC_EnableIRQ>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fc9d 	bl	8004ff2 <USB_ReadInterrupts>
 80006b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 fac6 	bl	8000c56 <PCD_EP_ISR_Handler>

    return;
 80006ca:	e110      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006de:	b29a      	uxth	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006e8:	b292      	uxth	r2, r2
 80006ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 ffd9 	bl	80066a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80006f4:	2100      	movs	r1, #0
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f8fc 	bl	80008f4 <HAL_PCD_SetAddress>

    return;
 80006fc:	e0f7      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00c      	beq.n	8000722 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000710:	b29a      	uxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800071a:	b292      	uxth	r2, r2
 800071c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000720:	e0e5      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00c      	beq.n	8000746 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000734:	b29a      	uxth	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800073e:	b292      	uxth	r2, r2
 8000740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000744:	e0d3      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800074c:	2b00      	cmp	r3, #0
 800074e:	d034      	beq.n	80007ba <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f022 0204 	bic.w	r2, r2, #4
 8000762:	b292      	uxth	r2, r2
 8000764:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0208 	bic.w	r2, r2, #8
 800077a:	b292      	uxth	r2, r2
 800077c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d107      	bne.n	800079a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000792:	2100      	movs	r1, #0
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f006 f8cd 	bl	8006934 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f005 ffbc 	bl	8006718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80007b2:	b292      	uxth	r2, r2
 80007b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80007b8:	e099      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d027      	beq.n	8000814 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f042 0208 	orr.w	r2, r2, #8
 80007d6:	b292      	uxth	r2, r2
 80007d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007ee:	b292      	uxth	r2, r2
 80007f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f042 0204 	orr.w	r2, r2, #4
 8000806:	b292      	uxth	r2, r2
 8000808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f005 ff69 	bl	80066e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000812:	e06c      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	2b00      	cmp	r3, #0
 800081c:	d040      	beq.n	80008a0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000826:	b29a      	uxth	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000830:	b292      	uxth	r2, r2
 8000832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d12b      	bne.n	8000898 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000848:	b29a      	uxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0204 	orr.w	r2, r2, #4
 8000852:	b292      	uxth	r2, r2
 8000854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000860:	b29a      	uxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0208 	orr.w	r2, r2, #8
 800086a:	b292      	uxth	r2, r2
 800086c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000880:	b29b      	uxth	r3, r3
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800088e:	2101      	movs	r1, #1
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f006 f84f 	bl	8006934 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000896:	e02a      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f005 ff23 	bl	80066e4 <HAL_PCD_SuspendCallback>
    return;
 800089e:	e026      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00f      	beq.n	80008ca <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80008bc:	b292      	uxth	r2, r2
 80008be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f005 fee1 	bl	800668a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80008c8:	e011      	b.n	80008ee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00c      	beq.n	80008ee <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008e6:	b292      	uxth	r2, r2
 80008e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80008ec:	bf00      	nop
  }
}
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000906:	2b01      	cmp	r3, #1
 8000908:	d101      	bne.n	800090e <HAL_PCD_SetAddress+0x1a>
 800090a:	2302      	movs	r3, #2
 800090c:	e013      	b.n	8000936 <HAL_PCD_SetAddress+0x42>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	78fa      	ldrb	r2, [r7, #3]
 800091a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fb4f 	bl	8004fca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	4608      	mov	r0, r1
 8000948:	4611      	mov	r1, r2
 800094a:	461a      	mov	r2, r3
 800094c:	4603      	mov	r3, r0
 800094e:	70fb      	strb	r3, [r7, #3]
 8000950:	460b      	mov	r3, r1
 8000952:	803b      	strh	r3, [r7, #0]
 8000954:	4613      	mov	r3, r2
 8000956:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800095c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da0e      	bge.n	8000982 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2201      	movs	r2, #1
 800097e:	705a      	strb	r2, [r3, #1]
 8000980:	e00e      	b.n	80009a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	f003 0207 	and.w	r2, r3, #7
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80009ac:	883a      	ldrh	r2, [r7, #0]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	78ba      	ldrb	r2, [r7, #2]
 80009b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d004      	beq.n	80009ca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80009ca:	78bb      	ldrb	r3, [r7, #2]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d102      	bne.n	80009d6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d101      	bne.n	80009e4 <HAL_PCD_EP_Open+0xa6>
 80009e0:	2302      	movs	r3, #2
 80009e2:	e00e      	b.n	8000a02 <HAL_PCD_EP_Open+0xc4>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb20 	bl	8003038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000a00:	7afb      	ldrb	r3, [r7, #11]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	460b      	mov	r3, r1
 8000a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	f003 0207 	and.w	r2, r3, #7
 8000a20:	4613      	mov	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2200      	movs	r2, #0
 8000a48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000a4a:	7afb      	ldrb	r3, [r7, #11]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d106      	bne.n	8000a6e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6979      	ldr	r1, [r7, #20]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fe7a 	bl	8003760 <USB_EPStartXfer>
 8000a6c:	e005      	b.n	8000a7a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6979      	ldr	r1, [r7, #20]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fe73 	bl	8003760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	460b      	mov	r3, r1
 8000a92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2201      	movs	r2, #1
 8000ace:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d106      	bne.n	8000af4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6979      	ldr	r1, [r7, #20]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fe37 	bl	8003760 <USB_EPStartXfer>
 8000af2:	e005      	b.n	8000b00 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6979      	ldr	r1, [r7, #20]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fe30 	bl	8003760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	f003 0207 	and.w	r2, r3, #7
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d901      	bls.n	8000b28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e03e      	b.n	8000ba6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	da0e      	bge.n	8000b4e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	705a      	strb	r2, [r3, #1]
 8000b4c:	e00c      	b.n	8000b68 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000b4e:	78fa      	ldrb	r2, [r7, #3]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2200      	movs	r2, #0
 8000b66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b6e:	78fb      	ldrb	r3, [r7, #3]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <HAL_PCD_EP_SetStall+0x7e>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e00e      	b.n	8000ba6 <HAL_PCD_EP_SetStall+0x9c>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 f918 	bl	8004dcc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	f003 020f 	and.w	r2, r3, #15
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d901      	bls.n	8000bcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e040      	b.n	8000c4e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da0e      	bge.n	8000bf2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2201      	movs	r2, #1
 8000bee:	705a      	strb	r2, [r3, #1]
 8000bf0:	e00e      	b.n	8000c10 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	f003 0207 	and.w	r2, r3, #7
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <HAL_PCD_EP_ClrStall+0x82>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e00e      	b.n	8000c4e <HAL_PCD_EP_ClrStall+0xa0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68f9      	ldr	r1, [r7, #12]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 f915 	bl	8004e6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b096      	sub	sp, #88	; 0x58
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000c5e:	e39c      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000c6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8000c7a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 815e 	bne.w	8000f40 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000c84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d150      	bne.n	8000d32 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ca0:	81fb      	strh	r3, [r7, #14]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3328      	adds	r3, #40	; 0x28
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4413      	add	r3, r2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	441a      	add	r2, r3
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f005 fcaf 	bl	8006656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 834a 	beq.w	800139a <PCD_EP_ISR_Handler+0x744>
 8000d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8345 	bne.w	800139a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b292      	uxth	r2, r2
 8000d24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000d30:	e333      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d38:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000d44:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d032      	beq.n	8000db6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4413      	add	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8000d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	f004 f983 	bl	8005096 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	823b      	strh	r3, [r7, #16]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	8a3a      	ldrh	r2, [r7, #16]
 8000da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000daa:	b292      	uxth	r2, r2
 8000dac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f005 fc24 	bl	80065fc <HAL_PCD_SetupStageCallback>
 8000db4:	e2f1      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000db6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f280 82ed 	bge.w	800139a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000dcc:	4013      	ands	r3, r2
 8000dce:	83fb      	strh	r3, [r7, #30]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	8bfa      	ldrh	r2, [r7, #30]
 8000dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d019      	beq.n	8000e42 <PCD_EP_ISR_Handler+0x1ec>
 8000e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d015      	beq.n	8000e42 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e1c:	6959      	ldr	r1, [r3, #20]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8000e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e24:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	f004 f935 	bl	8005096 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	695a      	ldr	r2, [r3, #20]
 8000e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	441a      	add	r2, r3
 8000e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e38:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f005 fbef 	bl	8006620 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 82a3 	bne.w	800139a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b3e      	cmp	r3, #62	; 0x3e
 8000e7a:	d918      	bls.n	8000eae <PCD_EP_ISR_Handler+0x258>
 8000e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
 8000e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <PCD_EP_ISR_Handler+0x240>
 8000e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e92:	3b01      	subs	r3, #1
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
 8000e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	029b      	lsls	r3, r3, #10
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	e029      	b.n	8000f02 <PCD_EP_ISR_Handler+0x2ac>
 8000eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d112      	bne.n	8000edc <PCD_EP_ISR_Handler+0x286>
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	801a      	strh	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	e012      	b.n	8000f02 <PCD_EP_ISR_Handler+0x2ac>
 8000edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	085b      	lsrs	r3, r3, #1
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <PCD_EP_ISR_Handler+0x2a0>
 8000ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f12:	827b      	strh	r3, [r7, #18]
 8000f14:	8a7b      	ldrh	r3, [r7, #18]
 8000f16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000f1a:	827b      	strh	r3, [r7, #18]
 8000f1c:	8a7b      	ldrh	r3, [r7, #18]
 8000f1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000f22:	827b      	strh	r3, [r7, #18]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	8a7b      	ldrh	r3, [r7, #18]
 8000f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	8013      	strh	r3, [r2, #0]
 8000f3e:	e22c      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f54:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f280 80f6 	bge.w	800114a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f74:	4013      	ands	r3, r2
 8000f76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f90:	b292      	uxth	r2, r2
 8000f92:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8000f94:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8000faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fac:	7b1b      	ldrb	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d123      	bne.n	8000ffa <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8000fda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 808e 	beq.w	8001100 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fea:	6959      	ldr	r1, [r3, #20]
 8000fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fee:	88da      	ldrh	r2, [r3, #6]
 8000ff0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000ff4:	f004 f84f 	bl	8005096 <USB_ReadPMA>
 8000ff8:	e082      	b.n	8001100 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8000ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d10a      	bne.n	8001018 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001002:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001006:	461a      	mov	r2, r3
 8001008:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f9d3 	bl	80013b6 <HAL_PCD_EP_DB_Receive>
 8001010:	4603      	mov	r3, r0
 8001012:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001016:	e073      	b.n	8001100 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800102e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001032:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	441a      	add	r2, r3
 8001044:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800104c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001058:	b29b      	uxth	r3, r3
 800105a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d022      	beq.n	80010bc <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4413      	add	r3, r2
 8001090:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800109a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800109e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d02c      	beq.n	8001100 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ac:	6959      	ldr	r1, [r3, #20]
 80010ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b0:	891a      	ldrh	r2, [r3, #8]
 80010b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010b6:	f003 ffee 	bl	8005096 <USB_ReadPMA>
 80010ba:	e021      	b.n	8001100 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80010e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d009      	beq.n	8001100 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f2:	6959      	ldr	r1, [r3, #20]
 80010f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f6:	895a      	ldrh	r2, [r3, #10]
 80010f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80010fc:	f003 ffcb 	bl	8005096 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001102:	69da      	ldr	r2, [r3, #28]
 8001104:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001108:	441a      	add	r2, r3
 800110a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800110c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800110e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001116:	441a      	add	r2, r3
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800111c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <PCD_EP_ISR_Handler+0x4da>
 8001124:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d206      	bcs.n	800113e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f005 fa72 	bl	8006620 <HAL_PCD_DataOutStageCallback>
 800113c:	e005      	b.n	800114a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fb0b 	bl	8003760 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800114a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8121 	beq.w	800139a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8001158:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001186:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	441a      	add	r2, r3
 8001198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800119c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80011a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011aa:	78db      	ldrb	r3, [r3, #3]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f000 80a2 	beq.w	80012f6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80011b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80011b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ba:	7b1b      	ldrb	r3, [r3, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 8093 	beq.w	80012e8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d046      	beq.n	800125c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d126      	bne.n	8001224 <PCD_EP_ISR_Handler+0x5ce>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	4413      	add	r3, r2
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	4413      	add	r3, r2
 80011f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001208:	b29a      	uxth	r2, r3
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800121c:	b29a      	uxth	r2, r3
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	801a      	strh	r2, [r3, #0]
 8001222:	e061      	b.n	80012e8 <PCD_EP_ISR_Handler+0x692>
 8001224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d15d      	bne.n	80012e8 <PCD_EP_ISR_Handler+0x692>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	4413      	add	r3, r2
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	00da      	lsls	r2, r3, #3
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	4413      	add	r3, r2
 800124e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e045      	b.n	80012e8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d126      	bne.n	80012b8 <PCD_EP_ISR_Handler+0x662>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127e:	4413      	add	r3, r2
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
 8001282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	00da      	lsls	r2, r3, #3
 8001288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128a:	4413      	add	r3, r2
 800128c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
 8001292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800129c:	b29a      	uxth	r2, r3
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	e017      	b.n	80012e8 <PCD_EP_ISR_Handler+0x692>
 80012b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d113      	bne.n	80012e8 <PCD_EP_ISR_Handler+0x692>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ce:	4413      	add	r3, r2
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	00da      	lsls	r2, r3, #3
 80012d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012da:	4413      	add	r3, r2
 80012dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80012e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f005 f9b1 	bl	8006656 <HAL_PCD_DataInStageCallback>
 80012f4:	e051      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80012f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d144      	bne.n	800138c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	4413      	add	r3, r2
 800131c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001326:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001332:	429a      	cmp	r2, r3
 8001334:	d907      	bls.n	8001346 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8001336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001342:	619a      	str	r2, [r3, #24]
 8001344:	e002      	b.n	800134c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800134c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f005 f97b 	bl	8006656 <HAL_PCD_DataInStageCallback>
 8001360:	e01b      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800136a:	441a      	add	r2, r3
 800136c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800136e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001372:	69da      	ldr	r2, [r3, #28]
 8001374:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001378:	441a      	add	r2, r3
 800137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001384:	4618      	mov	r0, r3
 8001386:	f002 f9eb 	bl	8003760 <USB_EPStartXfer>
 800138a:	e006      	b.n	800139a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800138c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001390:	461a      	mov	r2, r3
 8001392:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f917 	bl	80015c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f6ff ac5a 	blt.w	8000c60 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3758      	adds	r7, #88	; 0x58
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b088      	sub	sp, #32
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	4613      	mov	r3, r2
 80013c2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07c      	beq.n	80014c8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	8b7b      	ldrh	r3, [r7, #26]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d306      	bcc.n	800140c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	8b7b      	ldrh	r3, [r7, #26]
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	e002      	b.n	8001412 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d123      	bne.n	8001462 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001434:	833b      	strh	r3, [r7, #24]
 8001436:	8b3b      	ldrh	r3, [r7, #24]
 8001438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800143c:	833b      	strh	r3, [r7, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	441a      	add	r2, r3
 800144c:	8b3b      	ldrh	r3, [r7, #24]
 800144e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145e:	b29b      	uxth	r3, r3
 8001460:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01f      	beq.n	80014ac <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001486:	82fb      	strh	r3, [r7, #22]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	441a      	add	r2, r3
 8001496:	8afb      	ldrh	r3, [r7, #22]
 8001498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800149c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80014ac:	8b7b      	ldrh	r3, [r7, #26]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8085 	beq.w	80015be <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	6959      	ldr	r1, [r3, #20]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	891a      	ldrh	r2, [r3, #8]
 80014c0:	8b7b      	ldrh	r3, [r7, #26]
 80014c2:	f003 fde8 	bl	8005096 <USB_ReadPMA>
 80014c6:	e07a      	b.n	80015be <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	8b7b      	ldrh	r3, [r7, #26]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d306      	bcc.n	8001506 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	8b7b      	ldrh	r3, [r7, #26]
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e002      	b.n	800150c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d123      	bne.n	800155c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800152a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152e:	83fb      	strh	r3, [r7, #30]
 8001530:	8bfb      	ldrh	r3, [r7, #30]
 8001532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001536:	83fb      	strh	r3, [r7, #30]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	441a      	add	r2, r3
 8001546:	8bfb      	ldrh	r3, [r7, #30]
 8001548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800154c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	b29b      	uxth	r3, r3
 800155a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11f      	bne.n	80015a6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800157c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001580:	83bb      	strh	r3, [r7, #28]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	441a      	add	r2, r3
 8001590:	8bbb      	ldrh	r3, [r7, #28]
 8001592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80015a6:	8b7b      	ldrh	r3, [r7, #26]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	6959      	ldr	r1, [r3, #20]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	895a      	ldrh	r2, [r3, #10]
 80015b8:	8b7b      	ldrh	r3, [r7, #26]
 80015ba:	f003 fd6c 	bl	8005096 <USB_ReadPMA>
    }
  }

  return count;
 80015be:	8b7b      	ldrh	r3, [r7, #26]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0a2      	sub	sp, #136	; 0x88
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 81c5 	beq.w	800196c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001606:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001612:	429a      	cmp	r2, r3
 8001614:	d907      	bls.n	8001626 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	e002      	b.n	800162c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f040 80b9 	bne.w	80017a8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d126      	bne.n	800168c <HAL_PCD_EP_DB_Transmit+0xc4>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164c:	b29b      	uxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	4413      	add	r3, r2
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	00da      	lsls	r2, r3, #3
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	4413      	add	r3, r2
 8001660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001670:	b29a      	uxth	r2, r3
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001684:	b29a      	uxth	r2, r3
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	e01a      	b.n	80016c2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d116      	bne.n	80016c2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	4413      	add	r3, r2
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	00da      	lsls	r2, r3, #3
 80016b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b4:	4413      	add	r3, r2
 80016b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d126      	bne.n	800171e <HAL_PCD_EP_DB_Transmit+0x156>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	00da      	lsls	r2, r3, #3
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4413      	add	r3, r2
 80016f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001702:	b29a      	uxth	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001716:	b29a      	uxth	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	e017      	b.n	800174e <HAL_PCD_EP_DB_Transmit+0x186>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d113      	bne.n	800174e <HAL_PCD_EP_DB_Transmit+0x186>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4413      	add	r3, r2
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	00da      	lsls	r2, r3, #3
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	4413      	add	r3, r2
 8001742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2200      	movs	r2, #0
 800174c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f004 ff7e 	bl	8006656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 82d2 	beq.w	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800177c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001780:	827b      	strh	r3, [r7, #18]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	441a      	add	r2, r3
 8001790:	8a7b      	ldrh	r3, [r7, #18]
 8001792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800179a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	8013      	strh	r3, [r2, #0]
 80017a6:	e2b0      	b.n	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d021      	beq.n	80017f6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	441a      	add	r2, r3
 80017de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80017e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 8284 	bne.w	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800180a:	441a      	add	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001818:	441a      	add	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	429a      	cmp	r2, r3
 8001828:	d309      	bcc.n	800183e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	e015      	b.n	800186a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800184a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001854:	e009      	b.n	800186a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d155      	bne.n	800191e <HAL_PCD_EP_DB_Transmit+0x356>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001886:	4413      	add	r3, r2
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	00da      	lsls	r2, r3, #3
 8001890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001892:	4413      	add	r3, r2
 8001894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
 800189a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800189c:	2b3e      	cmp	r3, #62	; 0x3e
 800189e:	d916      	bls.n	80018ce <HAL_PCD_EP_DB_Transmit+0x306>
 80018a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80018b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b2:	3b01      	subs	r3, #1
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	b29b      	uxth	r3, r3
 80018be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e043      	b.n	8001956 <HAL_PCD_EP_DB_Transmit+0x38e>
 80018ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d112      	bne.n	80018fa <HAL_PCD_EP_DB_Transmit+0x332>
 80018d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018de:	b29a      	uxth	r2, r3
 80018e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	801a      	strh	r2, [r3, #0]
 80018f8:	e02d      	b.n	8001956 <HAL_PCD_EP_DB_Transmit+0x38e>
 80018fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_PCD_EP_DB_Transmit+0x348>
 800190a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800190c:	3301      	adds	r3, #1
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001912:	b29b      	uxth	r3, r3
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	b29a      	uxth	r2, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e01b      	b.n	8001956 <HAL_PCD_EP_DB_Transmit+0x38e>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d117      	bne.n	8001956 <HAL_PCD_EP_DB_Transmit+0x38e>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800193a:	4413      	add	r3, r2
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001946:	4413      	add	r3, r2
 8001948:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001950:	b29a      	uxth	r2, r3
 8001952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001954:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	6959      	ldr	r1, [r3, #20]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	891a      	ldrh	r2, [r3, #8]
 8001962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001964:	b29b      	uxth	r3, r3
 8001966:	f003 fb54 	bl	8005012 <USB_WritePMA>
 800196a:	e1ce      	b.n	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	4413      	add	r3, r2
 8001986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	699a      	ldr	r2, [r3, #24]
 8001998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800199c:	429a      	cmp	r2, r3
 800199e:	d307      	bcc.n	80019b0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	699a      	ldr	r2, [r3, #24]
 80019a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	e002      	b.n	80019b6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80c4 	bne.w	8001b48 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	785b      	ldrb	r3, [r3, #1]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d126      	bne.n	8001a16 <HAL_PCD_EP_DB_Transmit+0x44e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019dc:	4413      	add	r3, r2
 80019de:	66bb      	str	r3, [r7, #104]	; 0x68
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	00da      	lsls	r2, r3, #3
 80019e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019e8:	4413      	add	r3, r2
 80019ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019ee:	667b      	str	r3, [r7, #100]	; 0x64
 80019f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a12:	801a      	strh	r2, [r3, #0]
 8001a14:	e01a      	b.n	8001a4c <HAL_PCD_EP_DB_Transmit+0x484>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d116      	bne.n	8001a4c <HAL_PCD_EP_DB_Transmit+0x484>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	673b      	str	r3, [r7, #112]	; 0x70
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a32:	4413      	add	r3, r2
 8001a34:	673b      	str	r3, [r7, #112]	; 0x70
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	00da      	lsls	r2, r3, #3
 8001a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a3e:	4413      	add	r3, r2
 8001a40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d12f      	bne.n	8001aba <HAL_PCD_EP_DB_Transmit+0x4f2>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a72:	4413      	add	r3, r2
 8001a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	00da      	lsls	r2, r3, #3
 8001a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a82:	4413      	add	r3, r2
 8001a84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ab6:	801a      	strh	r2, [r3, #0]
 8001ab8:	e017      	b.n	8001aea <HAL_PCD_EP_DB_Transmit+0x522>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d113      	bne.n	8001aea <HAL_PCD_EP_DB_Transmit+0x522>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ad0:	4413      	add	r3, r2
 8001ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	00da      	lsls	r2, r3, #3
 8001ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001adc:	4413      	add	r3, r2
 8001ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f004 fdb0 	bl	8006656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 8104 	bne.w	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	441a      	add	r2, r3
 8001b2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	8013      	strh	r3, [r2, #0]
 8001b46:	e0e0      	b.n	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d121      	bne.n	8001b96 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 80b4 	bne.w	8001d0a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001baa:	441a      	add	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	69da      	ldr	r2, [r3, #28]
 8001bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bb8:	441a      	add	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d309      	bcc.n	8001bde <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd6:	1ad2      	subs	r2, r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	621a      	str	r2, [r3, #32]
 8001bdc:	e015      	b.n	8001c0a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d107      	bne.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8001be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bf4:	e009      	b.n	8001c0a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d155      	bne.n	8001cc4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c2c:	4413      	add	r3, r2
 8001c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00da      	lsls	r2, r3, #3
 8001c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c38:	4413      	add	r3, r2
 8001c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c42:	2b3e      	cmp	r3, #62	; 0x3e
 8001c44:	d916      	bls.n	8001c74 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	677b      	str	r3, [r7, #116]	; 0x74
 8001c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_PCD_EP_DB_Transmit+0x694>
 8001c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	677b      	str	r3, [r7, #116]	; 0x74
 8001c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	e040      	b.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	e02a      	b.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	677b      	str	r3, [r7, #116]	; 0x74
 8001ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8001cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	677b      	str	r3, [r7, #116]	; 0x74
 8001cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	e018      	b.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d114      	bne.n	8001cf6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cda:	4413      	add	r3, r2
 8001cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	00da      	lsls	r2, r3, #3
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6959      	ldr	r1, [r3, #20]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	895a      	ldrh	r2, [r3, #10]
 8001d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f003 f984 	bl	8005012 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d24:	823b      	strh	r3, [r7, #16]
 8001d26:	8a3b      	ldrh	r3, [r7, #16]
 8001d28:	f083 0310 	eor.w	r3, r3, #16
 8001d2c:	823b      	strh	r3, [r7, #16]
 8001d2e:	8a3b      	ldrh	r3, [r7, #16]
 8001d30:	f083 0320 	eor.w	r3, r3, #32
 8001d34:	823b      	strh	r3, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	441a      	add	r2, r3
 8001d44:	8a3b      	ldrh	r3, [r7, #16]
 8001d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3788      	adds	r7, #136	; 0x88
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d141      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7e:	d131      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d86:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d98:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001da0:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2232      	movs	r2, #50	; 0x32
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4a3f      	ldr	r2, [pc, #252]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	e002      	b.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dca:	d102      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f2      	bne.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d158      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e057      	b.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dea:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001df4:	e04d      	b.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d141      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfe:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d131      	bne.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e24:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2232      	movs	r2, #50	; 0x32
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e42:	e002      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d102      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f2      	bne.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d112      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e011      	b.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e80:	e007      	b.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	431bde83 	.word	0x431bde83

08001eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e306      	b.n	80024cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d075      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eca:	4b97      	ldr	r3, [pc, #604]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed4:	4b94      	ldr	r3, [pc, #592]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_OscConfig+0x3e>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x44>
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05b      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x108>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d157      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e2e1      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x74>
 8001f12:	4b85      	ldr	r3, [pc, #532]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a84      	ldr	r2, [pc, #528]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x98>
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7b      	ldr	r2, [pc, #492]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xb0>
 8001f44:	4b78      	ldr	r3, [pc, #480]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a77      	ldr	r2, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b75      	ldr	r3, [pc, #468]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a74      	ldr	r2, [pc, #464]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fae2 	bl	800052c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fade 	bl	800052c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e2a6      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7e:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xc0>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7fe face 	bl	800052c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe faca 	bl	800052c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e292      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0xe8>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d075      	beq.n	80020ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x136>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x13c>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d11f      	bne.n	8002028 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x154>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e265      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b49      	ldr	r3, [pc, #292]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	4946      	ldr	r1, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002014:	4b45      	ldr	r3, [pc, #276]	; (800212c <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f99d 	bl	8000358 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e251      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d023      	beq.n	8002078 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe fa76 	bl	800052c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe fa72 	bl	800052c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e23a      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002056:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	492d      	ldr	r1, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
 8002076:	e01a      	b.n	80020ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 800207e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fa52 	bl	800052c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe fa4e 	bl	800052c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e216      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1e0>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d041      	beq.n	800213e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01c      	beq.n	80020fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 80020c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c8:	4a17      	ldr	r2, [pc, #92]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fa2b 	bl	800052c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe fa27 	bl	800052c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1ef      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ef      	beq.n	80020da <HAL_RCC_OscConfig+0x22e>
 80020fa:	e020      	b.n	800213e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe fa0e 	bl	800052c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002112:	e00d      	b.n	8002130 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe fa0a 	bl	800052c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d906      	bls.n	8002130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1d2      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ea      	bne.n	8002114 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a6 	beq.w	8002298 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x2b4>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x2b6>
 8002160:	2300      	movs	r3, #0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b7f      	ldr	r3, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a7e      	ldr	r2, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
 8002172:	4b7c      	ldr	r3, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002182:	4b79      	ldr	r3, [pc, #484]	; (8002368 <HAL_RCC_OscConfig+0x4bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x4bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4bc>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe f9c7 	bl	800052c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe f9c3 	bl	800052c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e18b      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x4bc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <HAL_RCC_OscConfig+0x32e>
 80021c8:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a65      	ldr	r2, [pc, #404]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d8:	e024      	b.n	8002224 <HAL_RCC_OscConfig+0x378>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d110      	bne.n	8002204 <HAL_RCC_OscConfig+0x358>
 80021e2:	4b60      	ldr	r3, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002202:	e00f      	b.n	8002224 <HAL_RCC_OscConfig+0x378>
 8002204:	4b57      	ldr	r3, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a56      	ldr	r2, [pc, #344]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d016      	beq.n	800225a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe f97e 	bl	800052c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe f97a 	bl	800052c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e140      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ed      	beq.n	8002234 <HAL_RCC_OscConfig+0x388>
 8002258:	e015      	b.n	8002286 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe f967 	bl	800052c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe f963 	bl	800052c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e129      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ed      	bne.n	8002262 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002286:	7ffb      	ldrb	r3, [r7, #31]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80022ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b2:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe f936 	bl	800052c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c4:	f7fe f932 	bl	800052c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0fa      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x418>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe f919 	bl	800052c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fe:	f7fe f915 	bl	800052c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0dd      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d1 	beq.w	80024ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b0c      	cmp	r3, #12
 8002332:	f000 808b 	beq.w	800244c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d15e      	bne.n	80023fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe f8ef 	bl	800052c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	e00c      	b.n	800236c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe f8eb 	bl	800052c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d905      	bls.n	800236c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0b3      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ec      	bne.n	8002352 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002378:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x62c>)
 800237e:	4013      	ands	r3, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6a11      	ldr	r1, [r2, #32]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002388:	3a01      	subs	r2, #1
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002392:	0212      	lsls	r2, r2, #8
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800239a:	0852      	lsrs	r2, r2, #1
 800239c:	3a01      	subs	r2, #1
 800239e:	0552      	lsls	r2, r2, #21
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023a6:	0852      	lsrs	r2, r2, #1
 80023a8:	3a01      	subs	r2, #1
 80023aa:	0652      	lsls	r2, r2, #25
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023b2:	06d2      	lsls	r2, r2, #27
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4947      	ldr	r1, [pc, #284]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023bc:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a44      	ldr	r2, [pc, #272]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a41      	ldr	r2, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe f8aa 	bl	800052c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe f8a6 	bl	800052c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e06e      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x530>
 80023fa:	e066      	b.n	80024ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800241a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe f882 	bl	800052c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe f87e 	bl	800052c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e046      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x580>
 800244a:	e03e      	b.n	80024ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e039      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_RCC_OscConfig+0x628>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d12c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	3b01      	subs	r3, #1
 8002478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d123      	bne.n	80024c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d113      	bne.n	80024c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	3b01      	subs	r3, #1
 80024ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	3b01      	subs	r3, #1
 80024c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	019f800c 	.word	0x019f800c

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e11e      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b91      	ldr	r3, [pc, #580]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d910      	bls.n	8002524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b8e      	ldr	r3, [pc, #568]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 020f 	bic.w	r2, r3, #15
 800250a:	498c      	ldr	r1, [pc, #560]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e106      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d073      	beq.n	8002618 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d129      	bne.n	800258c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0f4      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002548:	f000 f9e6 	bl	8002918 <RCC_GetSysClockFreqFromPLLSource>
 800254c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_ClockConfig+0x268>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d93f      	bls.n	80025d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002556:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800256a:	2b00      	cmp	r3, #0
 800256c:	d033      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12f      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257e:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e024      	b.n	80025d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0c6      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0be      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025b4:	f000 f8ce 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4a61      	ldr	r2, [pc, #388]	; (8002744 <HAL_RCC_ClockConfig+0x268>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d909      	bls.n	80025d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ca:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4957      	ldr	r1, [pc, #348]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e8:	f7fd ffa0 	bl	800052c <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fd ff9c 	bl	800052c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e095      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d023      	beq.n	800266c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a42      	ldr	r2, [pc, #264]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800263a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002650:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4936      	ldr	r1, [pc, #216]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
 800266a:	e008      	b.n	800267e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d105      	bne.n	800267e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d21d      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 020f 	bic.w	r2, r3, #15
 8002694:	4929      	ldr	r1, [pc, #164]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800269c:	f7fd ff46 	bl	800052c <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fd ff42 	bl	800052c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e03b      	b.n	8002732 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1ed      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4917      	ldr	r1, [pc, #92]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490f      	ldr	r1, [pc, #60]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002706:	f000 f825 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCC_ClockConfig+0x264>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490c      	ldr	r1, [pc, #48]	; (8002748 <HAL_RCC_ClockConfig+0x26c>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x270>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fe14 	bl	8000358 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
 8002744:	04c4b400 	.word	0x04c4b400
 8002748:	08006a74 	.word	0x08006a74
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800275a:	4b2c      	ldr	r3, [pc, #176]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b04      	cmp	r3, #4
 8002764:	d102      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e047      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d102      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc0>)
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e03e      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d136      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a8:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b2:	68d2      	ldr	r2, [r2, #12]
 80027b4:	0a12      	lsrs	r2, r2, #8
 80027b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
      break;
 80027c0:	e00c      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c2:	4a13      	ldr	r2, [pc, #76]	; (8002810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027cc:	68d2      	ldr	r2, [r2, #12]
 80027ce:	0a12      	lsrs	r2, r2, #8
 80027d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
      break;
 80027da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0e5b      	lsrs	r3, r3, #25
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e001      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027fc:	693b      	ldr	r3, [r7, #16]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	00f42400 	.word	0x00f42400
 8002814:	016e3600 	.word	0x016e3600

08002818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0adb      	lsrs	r3, r3, #11
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4904      	ldr	r1, [pc, #16]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08006a84 	.word	0x08006a84

0800285c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	220f      	movs	r2, #15
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCC_GetClockConfig+0x60>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_EnableCSS+0x1c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_RCC_EnableCSS+0x1c>)
 80028ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_RCC_NMI_IRQHandler+0x24>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80028f2:	f000 f809 	bl	8002908 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCC_NMI_IRQHandler+0x24>)
 80028f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fc:	621a      	str	r2, [r3, #32]
  }
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3301      	adds	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d10c      	bne.n	8002956 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002946:	68d2      	ldr	r2, [r2, #12]
 8002948:	0a12      	lsrs	r2, r2, #8
 800294a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
    break;
 8002954:	e00c      	b.n	8002970 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	0a12      	lsrs	r2, r2, #8
 8002964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    break;
 800296e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0e5b      	lsrs	r3, r3, #25
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800298a:	687b      	ldr	r3, [r7, #4]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	016e3600 	.word	0x016e3600
 80029a0:	00f42400 	.word	0x00f42400

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e049      	b.n	8002a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f841 	bl	8002a52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 fa52 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e04a      	b.n	8002b16 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d013      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d115      	bne.n	8002b00 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d015      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0xaa>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d011      	beq.n	8002b12 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	e008      	b.n	8002b12 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e000      	b.n	8002b14 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40013400 	.word	0x40013400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	00010007 	.word	0x00010007

08002b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0202 	mvn.w	r2, #2
 8002b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f965 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f957 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f968 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0204 	mvn.w	r2, #4
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f93b 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f92d 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f93e 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0208 	mvn.w	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f911 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f903 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f914 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0210 	mvn.w	r2, #16
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8e7 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8d9 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f8ea 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0201 	mvn.w	r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fb34 	bl	8000328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f96a 	bl	8002fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	d10e      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d107      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f95d 	bl	8002fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d10e      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f898 	bl	8002e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d10e      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d107      	bne.n	8002d72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f06f 0220 	mvn.w	r2, #32
 8002d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f91d 	bl	8002fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d80:	d10f      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f923 	bl	8002fe8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db0:	d10f      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f915 	bl	8002ffc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de0:	d10f      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df0:	d107      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f907 	bl	8003010 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e10:	d10f      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e20:	d107      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8f9 	bl	8003024 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	; (8002f90 <TIM_Base_SetConfig+0x104>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <TIM_Base_SetConfig+0x108>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a38      	ldr	r2, [pc, #224]	; (8002f98 <TIM_Base_SetConfig+0x10c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a37      	ldr	r2, [pc, #220]	; (8002f9c <TIM_Base_SetConfig+0x110>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	; (8002f90 <TIM_Base_SetConfig+0x104>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d017      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2a      	ldr	r2, [pc, #168]	; (8002f94 <TIM_Base_SetConfig+0x108>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <TIM_Base_SetConfig+0x10c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <TIM_Base_SetConfig+0x110>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <TIM_Base_SetConfig+0x104>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00f      	beq.n	8002f74 <TIM_Base_SetConfig+0xe8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <TIM_Base_SetConfig+0x110>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <TIM_Base_SetConfig+0xe8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0xe8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0xe8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40013400 	.word	0x40013400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800

08002fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003038:	b480      	push	{r7}
 800303a:	b09d      	sub	sp, #116	; 0x74
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	78db      	ldrb	r3, [r3, #3]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d81f      	bhi.n	80030aa <USB_ActivateEndpoint+0x72>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <USB_ActivateEndpoint+0x38>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003081 	.word	0x08003081
 8003074:	0800309d 	.word	0x0800309d
 8003078:	080030b3 	.word	0x080030b3
 800307c:	0800308f 	.word	0x0800308f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003080:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003088:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800308c:	e012      	b.n	80030b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800308e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003092:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003096:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800309a:	e00b      	b.n	80030b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800309c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80030a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80030a8:	e004      	b.n	80030b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80030b0:	e000      	b.n	80030b4 <USB_ActivateEndpoint+0x7c>
      break;
 80030b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80030c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800310c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8149 	bne.w	80033bc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8084 	beq.w	800323c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00da      	lsls	r2, r3, #3
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	88db      	ldrh	r3, [r3, #6]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	827b      	strh	r3, [r7, #18]
 8003176:	8a7b      	ldrh	r3, [r7, #18]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <USB_ActivateEndpoint+0x180>
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	823b      	strh	r3, [r7, #16]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	8a3b      	ldrh	r3, [r7, #16]
 80031a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	78db      	ldrb	r3, [r3, #3]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d020      	beq.n	8003202 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	81bb      	strh	r3, [r7, #12]
 80031d8:	89bb      	ldrh	r3, [r7, #12]
 80031da:	f083 0320 	eor.w	r3, r3, #32
 80031de:	81bb      	strh	r3, [r7, #12]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	89bb      	ldrh	r3, [r7, #12]
 80031ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	8013      	strh	r3, [r2, #0]
 8003200:	e2a6      	b.n	8003750 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003218:	81fb      	strh	r3, [r7, #14]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	89fb      	ldrh	r3, [r7, #14]
 8003226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]
 800323a:	e289      	b.n	8003750 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	4413      	add	r3, r2
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	00da      	lsls	r2, r3, #3
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	4413      	add	r3, r2
 800325a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	88db      	ldrh	r3, [r3, #6]
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	b29b      	uxth	r3, r3
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	4413      	add	r3, r2
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00da      	lsls	r2, r3, #3
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	4413      	add	r3, r2
 800328e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b3e      	cmp	r3, #62	; 0x3e
 800329a:	d918      	bls.n	80032ce <USB_ActivateEndpoint+0x296>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <USB_ActivateEndpoint+0x27e>
 80032b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b2:	3b01      	subs	r3, #1
 80032b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	b29b      	uxth	r3, r3
 80032be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	801a      	strh	r2, [r3, #0]
 80032cc:	e029      	b.n	8003322 <USB_ActivateEndpoint+0x2ea>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <USB_ActivateEndpoint+0x2c4>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e012      	b.n	8003322 <USB_ActivateEndpoint+0x2ea>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	66bb      	str	r3, [r7, #104]	; 0x68
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <USB_ActivateEndpoint+0x2de>
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	3301      	adds	r3, #1
 8003314:	66bb      	str	r3, [r7, #104]	; 0x68
 8003316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003318:	b29b      	uxth	r3, r3
 800331a:	029b      	lsls	r3, r3, #10
 800331c:	b29a      	uxth	r2, r3
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01b      	beq.n	8003372 <USB_ActivateEndpoint+0x33a>
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003350:	843b      	strh	r3, [r7, #32]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	8c3b      	ldrh	r3, [r7, #32]
 800335e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	83fb      	strh	r3, [r7, #30]
 800338a:	8bfb      	ldrh	r3, [r7, #30]
 800338c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003390:	83fb      	strh	r3, [r7, #30]
 8003392:	8bfb      	ldrh	r3, [r7, #30]
 8003394:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003398:	83fb      	strh	r3, [r7, #30]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
 80033ba:	e1c9      	b.n	8003750 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d11e      	bne.n	8003402 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80033ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80033f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	8013      	strh	r3, [r2, #0]
 8003400:	e01d      	b.n	800343e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800342a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	4413      	add	r3, r2
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	00da      	lsls	r2, r3, #3
 8003458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345a:	4413      	add	r3, r2
 800345c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003460:	65bb      	str	r3, [r7, #88]	; 0x58
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	891b      	ldrh	r3, [r3, #8]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	b29b      	uxth	r3, r3
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	657b      	str	r3, [r7, #84]	; 0x54
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	4413      	add	r3, r2
 8003484:	657b      	str	r3, [r7, #84]	; 0x54
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	4413      	add	r3, r2
 8003490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	895b      	ldrh	r3, [r3, #10]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	b29b      	uxth	r3, r3
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8093 	bne.w	80035d6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <USB_ActivateEndpoint+0x4cc>
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <USB_ActivateEndpoint+0x51c>
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	873b      	strh	r3, [r7, #56]	; 0x38
 800356c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800356e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003572:	873b      	strh	r3, [r7, #56]	; 0x38
 8003574:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800357a:	873b      	strh	r3, [r7, #56]	; 0x38
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	b29b      	uxth	r3, r3
 800359a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	8013      	strh	r3, [r2, #0]
 80035d4:	e0bc      	b.n	8003750 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <USB_ActivateEndpoint+0x5f6>
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800361a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800363e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01d      	beq.n	8003686 <USB_ActivateEndpoint+0x64e>
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	78db      	ldrb	r3, [r3, #3]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d024      	beq.n	80036d8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036ac:	f083 0320 	eor.w	r3, r3, #32
 80036b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	8013      	strh	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003710:	b29b      	uxth	r3, r3
 8003712:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	441a      	add	r2, r3
 8003738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800373c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374c:	b29b      	uxth	r3, r3
 800374e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003750:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003754:	4618      	mov	r0, r3
 8003756:	3774      	adds	r7, #116	; 0x74
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0c2      	sub	sp, #264	; 0x108
 8003764:	af00      	add	r7, sp, #0
 8003766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376e:	6018      	str	r0, [r3, #0]
 8003770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003778:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800377a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800377e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 867b 	bne.w	8004482 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800379c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80037a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b8:	e007      	b.n	80037ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80037ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	7b1b      	ldrb	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d13a      	bne.n	8003850 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6959      	ldr	r1, [r3, #20]
 80037e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	88da      	ldrh	r2, [r3, #6]
 80037f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80037fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	f001 fc06 	bl	8005012 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800382e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	00da      	lsls	r2, r3, #3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	f000 bde3 	b.w	8004416 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 843a 	bne.w	80040d6 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	f240 83b7 	bls.w	8003fee <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80038aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ec:	1ad2      	subs	r2, r2, r3
 80038ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 81b3 	beq.w	8003c88 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d16d      	bne.n	8003a1a <USB_EPStartXfer+0x2ba>
 800393e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
 800394a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800394e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	4413      	add	r3, r2
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
 8003962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00da      	lsls	r2, r3, #3
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	4413      	add	r3, r2
 8003974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	2b3e      	cmp	r3, #62	; 0x3e
 8003980:	d91c      	bls.n	80039bc <USB_EPStartXfer+0x25c>
 8003982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <USB_EPStartXfer+0x242>
 8003998:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800399c:	3b01      	subs	r3, #1
 800399e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e053      	b.n	8003a64 <USB_EPStartXfer+0x304>
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <USB_EPStartXfer+0x28a>
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e03c      	b.n	8003a64 <USB_EPStartXfer+0x304>
 80039ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <USB_EPStartXfer+0x2aa>
 8003a00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a04:	3301      	adds	r3, #1
 8003a06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	029b      	lsls	r3, r3, #10
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	e024      	b.n	8003a64 <USB_EPStartXfer+0x304>
 8003a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d11c      	bne.n	8003a64 <USB_EPStartXfer+0x304>
 8003a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	4413      	add	r3, r2
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	00da      	lsls	r2, r3, #3
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	4413      	add	r3, r2
 8003a54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	895b      	ldrh	r3, [r3, #10]
 8003a70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6959      	ldr	r1, [r3, #20]
 8003a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003a8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003a8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003a92:	6800      	ldr	r0, [r0, #0]
 8003a94:	f001 fabd 	bl	8005012 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa8:	441a      	add	r2, r3
 8003aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d90f      	bls.n	8003af2 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8003ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	e00e      	b.n	8003b10 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d16d      	bne.n	8003bfc <USB_EPStartXfer+0x49c>
 8003b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00da      	lsls	r2, r3, #3
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b60:	2b3e      	cmp	r3, #62	; 0x3e
 8003b62:	d91c      	bls.n	8003b9e <USB_EPStartXfer+0x43e>
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <USB_EPStartXfer+0x424>
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e059      	b.n	8003c52 <USB_EPStartXfer+0x4f2>
 8003b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d112      	bne.n	8003bcc <USB_EPStartXfer+0x46c>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e042      	b.n	8003c52 <USB_EPStartXfer+0x4f2>
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d004      	beq.n	8003bec <USB_EPStartXfer+0x48c>
 8003be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be6:	3301      	adds	r3, #1
 8003be8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	029b      	lsls	r3, r3, #10
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e02a      	b.n	8003c52 <USB_EPStartXfer+0x4f2>
 8003bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d122      	bne.n	8003c52 <USB_EPStartXfer+0x4f2>
 8003c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00da      	lsls	r2, r3, #3
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	4413      	add	r3, r2
 8003c42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	891b      	ldrh	r3, [r3, #8]
 8003c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6959      	ldr	r1, [r3, #20]
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003c78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003c7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003c80:	6800      	ldr	r0, [r0, #0]
 8003c82:	f001 f9c6 	bl	8005012 <USB_WritePMA>
 8003c86:	e3c6      	b.n	8004416 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d16d      	bne.n	8003d74 <USB_EPStartXfer+0x614>
 8003c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb8:	4413      	add	r3, r2
 8003cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	00da      	lsls	r2, r3, #3
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	4413      	add	r3, r2
 8003cce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8003cda:	d91c      	bls.n	8003d16 <USB_EPStartXfer+0x5b6>
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <USB_EPStartXfer+0x59c>
 8003cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	029b      	lsls	r3, r3, #10
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e059      	b.n	8003dca <USB_EPStartXfer+0x66a>
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d112      	bne.n	8003d44 <USB_EPStartXfer+0x5e4>
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	801a      	strh	r2, [r3, #0]
 8003d42:	e042      	b.n	8003dca <USB_EPStartXfer+0x66a>
 8003d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <USB_EPStartXfer+0x604>
 8003d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	e02a      	b.n	8003dca <USB_EPStartXfer+0x66a>
 8003d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d122      	bne.n	8003dca <USB_EPStartXfer+0x66a>
 8003d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	4413      	add	r3, r2
 8003da6:	653b      	str	r3, [r7, #80]	; 0x50
 8003da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	891b      	ldrh	r3, [r3, #8]
 8003dd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6959      	ldr	r1, [r3, #20]
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003df0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003df4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003df8:	6800      	ldr	r0, [r0, #0]
 8003dfa:	f001 f90a 	bl	8005012 <USB_WritePMA>
            ep->xfer_buff += len;
 8003dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0e:	441a      	add	r2, r3
 8003e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d90f      	bls.n	8003e58 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8003e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	621a      	str	r2, [r3, #32]
 8003e56:	e00e      	b.n	8003e76 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	643b      	str	r3, [r7, #64]	; 0x40
 8003e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d16d      	bne.n	8003f6e <USB_EPStartXfer+0x80e>
 8003e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	4413      	add	r3, r2
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	00da      	lsls	r2, r3, #3
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ed4:	d91c      	bls.n	8003f10 <USB_EPStartXfer+0x7b0>
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <USB_EPStartXfer+0x796>
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	801a      	strh	r2, [r3, #0]
 8003f0e:	e053      	b.n	8003fb8 <USB_EPStartXfer+0x858>
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d112      	bne.n	8003f3e <USB_EPStartXfer+0x7de>
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e03c      	b.n	8003fb8 <USB_EPStartXfer+0x858>
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <USB_EPStartXfer+0x7fe>
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e024      	b.n	8003fb8 <USB_EPStartXfer+0x858>
 8003f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d11c      	bne.n	8003fb8 <USB_EPStartXfer+0x858>
 8003f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	4413      	add	r3, r2
 8003f94:	643b      	str	r3, [r7, #64]	; 0x40
 8003f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	00da      	lsls	r2, r3, #3
 8003fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	895b      	ldrh	r3, [r3, #10]
 8003fc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6959      	ldr	r1, [r3, #20]
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003fde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003fe2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	f001 f813 	bl	8005012 <USB_WritePMA>
 8003fec:	e213      	b.n	8004416 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800402c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800405a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800406a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004074:	b29b      	uxth	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407a:	4413      	add	r3, r2
 800407c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800407e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	00da      	lsls	r2, r3, #3
 800408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408e:	4413      	add	r3, r2
 8004090:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004094:	65bb      	str	r3, [r7, #88]	; 0x58
 8004096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409a:	b29a      	uxth	r2, r3
 800409c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	891b      	ldrh	r3, [r3, #8]
 80040ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6959      	ldr	r1, [r3, #20]
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80040ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80040ce:	6800      	ldr	r0, [r0, #0]
 80040d0:	f000 ff9f 	bl	8005012 <USB_WritePMA>
 80040d4:	e19f      	b.n	8004416 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80040d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80bc 	beq.w	8004294 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800411c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	673b      	str	r3, [r7, #112]	; 0x70
 8004128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800412c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d16d      	bne.n	8004214 <USB_EPStartXfer+0xab4>
 8004138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	66bb      	str	r3, [r7, #104]	; 0x68
 8004144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004158:	4413      	add	r3, r2
 800415a:	66bb      	str	r3, [r7, #104]	; 0x68
 800415c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00da      	lsls	r2, r3, #3
 800416a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416c:	4413      	add	r3, r2
 800416e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004172:	667b      	str	r3, [r7, #100]	; 0x64
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004178:	2b3e      	cmp	r3, #62	; 0x3e
 800417a:	d91c      	bls.n	80041b6 <USB_EPStartXfer+0xa56>
 800417c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <USB_EPStartXfer+0xa3c>
 8004192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004196:	3b01      	subs	r3, #1
 8004198:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800419c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	e053      	b.n	800425e <USB_EPStartXfer+0xafe>
 80041b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d112      	bne.n	80041e4 <USB_EPStartXfer+0xa84>
 80041be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e03c      	b.n	800425e <USB_EPStartXfer+0xafe>
 80041e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <USB_EPStartXfer+0xaa4>
 80041fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041fe:	3301      	adds	r3, #1
 8004200:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004204:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004208:	b29b      	uxth	r3, r3
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	b29a      	uxth	r2, r3
 800420e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e024      	b.n	800425e <USB_EPStartXfer+0xafe>
 8004214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d11c      	bne.n	800425e <USB_EPStartXfer+0xafe>
 8004224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004238:	4413      	add	r3, r2
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
 800423c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	00da      	lsls	r2, r3, #3
 800424a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424c:	4413      	add	r3, r2
 800424e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004258:	b29a      	uxth	r2, r3
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800425e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	895b      	ldrh	r3, [r3, #10]
 800426a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800426e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6959      	ldr	r1, [r3, #20]
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427e:	b29b      	uxth	r3, r3
 8004280:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004284:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004288:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f000 fec0 	bl	8005012 <USB_WritePMA>
 8004292:	e0c0      	b.n	8004416 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d16d      	bne.n	8004380 <USB_EPStartXfer+0xc20>
 80042a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c4:	4413      	add	r3, r2
 80042c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042de:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e4:	2b3e      	cmp	r3, #62	; 0x3e
 80042e6:	d91c      	bls.n	8004322 <USB_EPStartXfer+0xbc2>
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d104      	bne.n	8004308 <USB_EPStartXfer+0xba8>
 80042fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004302:	3b01      	subs	r3, #1
 8004304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004308:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800430c:	b29b      	uxth	r3, r3
 800430e:	029b      	lsls	r3, r3, #10
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431a:	b29a      	uxth	r2, r3
 800431c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e05f      	b.n	80043e2 <USB_EPStartXfer+0xc82>
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004326:	2b00      	cmp	r3, #0
 8004328:	d112      	bne.n	8004350 <USB_EPStartXfer+0xbf0>
 800432a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004334:	b29a      	uxth	r2, r3
 8004336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004348:	b29a      	uxth	r2, r3
 800434a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e048      	b.n	80043e2 <USB_EPStartXfer+0xc82>
 8004350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800435a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <USB_EPStartXfer+0xc10>
 8004366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800436a:	3301      	adds	r3, #1
 800436c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004374:	b29b      	uxth	r3, r3
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	b29a      	uxth	r2, r3
 800437a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e030      	b.n	80043e2 <USB_EPStartXfer+0xc82>
 8004380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d128      	bne.n	80043e2 <USB_EPStartXfer+0xc82>
 8004390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800439e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043b4:	4413      	add	r3, r2
 80043b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	00da      	lsls	r2, r3, #3
 80043c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043cc:	4413      	add	r3, r2
 80043ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043da:	b29a      	uxth	r2, r3
 80043dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	891b      	ldrh	r3, [r3, #8]
 80043ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6959      	ldr	r1, [r3, #20]
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004402:	b29b      	uxth	r3, r3
 8004404:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004408:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800440c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004410:	6800      	ldr	r0, [r0, #0]
 8004412:	f000 fdfe 	bl	8005012 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	f083 0310 	eor.w	r3, r3, #16
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	f083 0320 	eor.w	r3, r3, #32
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	441a      	add	r2, r3
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]
 800447e:	f000 bc9f 	b.w	8004dc0 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	7b1b      	ldrb	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 80ae 	bne.w	80045f0 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d917      	bls.n	80044e0 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80044b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80044c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d0:	1ad2      	subs	r2, r2, r3
 80044d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	619a      	str	r2, [r3, #24]
 80044de:	e00e      	b.n	80044fe <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80044e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80044f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80044fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800450c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004522:	4413      	add	r3, r2
 8004524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800452c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	00da      	lsls	r2, r3, #3
 8004536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800453a:	4413      	add	r3, r2
 800453c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004548:	2b3e      	cmp	r3, #62	; 0x3e
 800454a:	d91d      	bls.n	8004588 <USB_EPStartXfer+0xe28>
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <USB_EPStartXfer+0xe0c>
 8004562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004566:	3b01      	subs	r3, #1
 8004568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004570:	b29b      	uxth	r3, r3
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	b29b      	uxth	r3, r3
 8004576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457e:	b29a      	uxth	r2, r3
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e3e1      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <USB_EPStartXfer+0xe5e>
 8004590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800459c:	b29a      	uxth	r2, r3
 800459e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	e3c6      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <USB_EPStartXfer+0xe7e>
 80045d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045d8:	3301      	adds	r3, #1
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e3ad      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80045f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f040 8200 	bne.w	8004a02 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f040 8091 	bne.w	8004736 <USB_EPStartXfer+0xfd6>
 8004614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004630:	b29b      	uxth	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004638:	4413      	add	r3, r2
 800463a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800463e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	00da      	lsls	r2, r3, #3
 800464c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004650:	4413      	add	r3, r2
 8004652:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800465a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800465e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b3e      	cmp	r3, #62	; 0x3e
 8004668:	d925      	bls.n	80046b6 <USB_EPStartXfer+0xf56>
 800466a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800466e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <USB_EPStartXfer+0xf3a>
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	3b01      	subs	r3, #1
 8004696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	b29b      	uxth	r3, r3
 80046a0:	029b      	lsls	r3, r3, #10
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e074      	b.n	80047a0 <USB_EPStartXfer+0x1040>
 80046b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d116      	bne.n	80046f4 <USB_EPStartXfer+0xf94>
 80046c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e055      	b.n	80047a0 <USB_EPStartXfer+0x1040>
 80046f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <USB_EPStartXfer+0xfc4>
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	3301      	adds	r3, #1
 8004720:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004728:	b29b      	uxth	r3, r3
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	b29a      	uxth	r2, r3
 800472e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	e034      	b.n	80047a0 <USB_EPStartXfer+0x1040>
 8004736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800473a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d12c      	bne.n	80047a0 <USB_EPStartXfer+0x1040>
 8004746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004762:	b29b      	uxth	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800476a:	4413      	add	r3, r2
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	00da      	lsls	r2, r3, #3
 800477e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004782:	4413      	add	r3, r2
 8004784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800478c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	b29a      	uxth	r2, r3
 800479a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 8091 	bne.w	80048e2 <USB_EPStartXfer+0x1182>
 80047c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047e4:	4413      	add	r3, r2
 80047e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b3e      	cmp	r3, #62	; 0x3e
 8004814:	d925      	bls.n	8004862 <USB_EPStartXfer+0x1102>
 8004816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800482c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <USB_EPStartXfer+0x10e6>
 800483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004840:	3b01      	subs	r3, #1
 8004842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484a:	b29b      	uxth	r3, r3
 800484c:	029b      	lsls	r3, r3, #10
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e06d      	b.n	800493e <USB_EPStartXfer+0x11de>
 8004862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <USB_EPStartXfer+0x1140>
 8004872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800487e:	b29a      	uxth	r2, r3
 8004880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004896:	b29a      	uxth	r2, r3
 8004898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e04e      	b.n	800493e <USB_EPStartXfer+0x11de>
 80048a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <USB_EPStartXfer+0x1170>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ca:	3301      	adds	r3, #1
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e02d      	b.n	800493e <USB_EPStartXfer+0x11de>
 80048e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d125      	bne.n	800493e <USB_EPStartXfer+0x11de>
 80048f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004908:	4413      	add	r3, r2
 800490a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800490e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	00da      	lsls	r2, r3, #3
 800491c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004920:	4413      	add	r3, r2
 8004922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800492a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	b29a      	uxth	r2, r3
 8004938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800493e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 81fe 	beq.w	8004d4c <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004970:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <USB_EPStartXfer+0x1228>
 800497c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004988:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800498c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 81db 	bne.w	8004d4c <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004996:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 81d4 	bne.w	8004d4c <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80049a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80049ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]
 8004a00:	e1a4      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 819a 	bne.w	8004d48 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d917      	bls.n	8004a60 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8004a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	619a      	str	r2, [r3, #24]
 8004a5e:	e00e      	b.n	8004a7e <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8004a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d178      	bne.n	8004b80 <USB_EPStartXfer+0x1420>
 8004a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00da      	lsls	r2, r3, #3
 8004ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aca:	4413      	add	r3, r2
 8004acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8004ada:	d91d      	bls.n	8004b18 <USB_EPStartXfer+0x13b8>
 8004adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <USB_EPStartXfer+0x139c>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e064      	b.n	8004be2 <USB_EPStartXfer+0x1482>
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d116      	bne.n	8004b4e <USB_EPStartXfer+0x13ee>
 8004b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	e049      	b.n	8004be2 <USB_EPStartXfer+0x1482>
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <USB_EPStartXfer+0x140e>
 8004b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b7c:	801a      	strh	r2, [r3, #0]
 8004b7e:	e030      	b.n	8004be2 <USB_EPStartXfer+0x1482>
 8004b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d128      	bne.n	8004be2 <USB_EPStartXfer+0x1482>
 8004b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	00da      	lsls	r2, r3, #3
 8004bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bcc:	4413      	add	r3, r2
 8004bce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d178      	bne.n	8004cf2 <USB_EPStartXfer+0x1592>
 8004c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c24:	4413      	add	r3, r2
 8004c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	00da      	lsls	r2, r3, #3
 8004c38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4c:	d91d      	bls.n	8004c8a <USB_EPStartXfer+0x152a>
 8004c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <USB_EPStartXfer+0x150e>
 8004c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	e060      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <USB_EPStartXfer+0x1560>
 8004c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	e045      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <USB_EPStartXfer+0x1580>
 8004cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	029b      	lsls	r3, r3, #10
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e02c      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
 8004cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d124      	bne.n	8004d4c <USB_EPStartXfer+0x15ec>
 8004d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d18:	4413      	add	r3, r2
 8004d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	00da      	lsls	r2, r3, #3
 8004d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d30:	4413      	add	r3, r2
 8004d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d44:	801a      	strh	r2, [r3, #0]
 8004d46:	e001      	b.n	8004d4c <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e03a      	b.n	8004dc2 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d020      	beq.n	8004e20 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	81bb      	strh	r3, [r7, #12]
 8004df6:	89bb      	ldrh	r3, [r7, #12]
 8004df8:	f083 0310 	eor.w	r3, r3, #16
 8004dfc:	81bb      	strh	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	441a      	add	r2, r3
 8004e08:	89bb      	ldrh	r3, [r7, #12]
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]
 8004e1e:	e01f      	b.n	8004e60 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	81fb      	strh	r3, [r7, #14]
 8004e38:	89fb      	ldrh	r3, [r7, #14]
 8004e3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e3e:	81fb      	strh	r3, [r7, #14]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	7b1b      	ldrb	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 809d 	bne.w	8004fbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04c      	beq.n	8004f24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	823b      	strh	r3, [r7, #16]
 8004e98:	8a3b      	ldrh	r3, [r7, #16]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <USB_EPClearStall+0x6c>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	81fb      	strh	r3, [r7, #14]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	78db      	ldrb	r3, [r3, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d06c      	beq.n	8004fbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	81bb      	strh	r3, [r7, #12]
 8004efa:	89bb      	ldrh	r3, [r7, #12]
 8004efc:	f083 0320 	eor.w	r3, r3, #32
 8004f00:	81bb      	strh	r3, [r7, #12]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	89bb      	ldrh	r3, [r7, #12]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e04b      	b.n	8004fbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	82fb      	strh	r3, [r7, #22]
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <USB_EPClearStall+0x106>
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	82bb      	strh	r3, [r7, #20]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8abb      	ldrh	r3, [r7, #20]
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	827b      	strh	r3, [r7, #18]
 8004f8c:	8a7b      	ldrh	r3, [r7, #18]
 8004f8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f92:	827b      	strh	r3, [r7, #18]
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f9a:	827b      	strh	r3, [r7, #18]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8a7b      	ldrh	r3, [r7, #18]
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005000:	b29b      	uxth	r3, r3
 8005002:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005012:	b480      	push	{r7}
 8005014:	b08d      	sub	sp, #52	; 0x34
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	4611      	mov	r1, r2
 800501e:	461a      	mov	r2, r3
 8005020:	460b      	mov	r3, r1
 8005022:	80fb      	strh	r3, [r7, #6]
 8005024:	4613      	mov	r3, r2
 8005026:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005028:	88bb      	ldrh	r3, [r7, #4]
 800502a:	3301      	adds	r3, #1
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005048:	e01b      	b.n	8005082 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	3301      	adds	r3, #1
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	b29a      	uxth	r2, r3
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	3302      	adds	r3, #2
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	3301      	adds	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	3b01      	subs	r3, #1
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e0      	bne.n	800504a <USB_WritePMA+0x38>
  }
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	3734      	adds	r7, #52	; 0x34
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005096:	b480      	push	{r7}
 8005098:	b08b      	sub	sp, #44	; 0x2c
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	4611      	mov	r1, r2
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	80fb      	strh	r3, [r7, #6]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050ac:	88bb      	ldrh	r3, [r7, #4]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
 80050cc:	e018      	b.n	8005100 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3302      	adds	r3, #2
 80050da:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	3b01      	subs	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005106:	88bb      	ldrh	r3, [r7, #4]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	701a      	strb	r2, [r3, #0]
  }
}
 8005122:	bf00      	nop
 8005124:	372c      	adds	r7, #44	; 0x2c
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005150:	2303      	movs	r3, #3
 8005152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	4611      	mov	r1, r2
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
 8005170:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	4611      	mov	r1, r2
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
  }

  return USBD_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ff46 	bl	8006050 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d01a      	beq.n	800521e <USBD_LL_SetupStage+0x72>
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d822      	bhi.n	8005232 <USBD_LL_SetupStage+0x86>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <USBD_LL_SetupStage+0x4a>
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d00a      	beq.n	800520a <USBD_LL_SetupStage+0x5e>
 80051f4:	e01d      	b.n	8005232 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9ee 	bl	80055e0 <USBD_StdDevReq>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e020      	b.n	800524c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa52 	bl	80056bc <USBD_StdItfReq>
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e016      	b.n	800524c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa91 	bl	800574e <USBD_StdEPReq>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	e00c      	b.n	800524c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 faab 	bl	800679c <USBD_LL_StallEP>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]
      break;
 800524a:	bf00      	nop
  }

  return ret;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	460b      	mov	r3, r1
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005264:	7afb      	ldrb	r3, [r7, #11]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d138      	bne.n	80052dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005270:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005278:	2b03      	cmp	r3, #3
 800527a:	d14a      	bne.n	8005312 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d913      	bls.n	80052b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	1ad2      	subs	r2, r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4293      	cmp	r3, r2
 80052a0:	bf28      	it	cs
 80052a2:	4613      	movcs	r3, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 ff48 	bl	800613e <USBD_CtlContinueRx>
 80052ae:	e030      	b.n	8005312 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d10b      	bne.n	80052d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 ff43 	bl	8006160 <USBD_CtlSendStatus>
 80052da:	e01a      	b.n	8005312 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d114      	bne.n	8005312 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00e      	beq.n	8005312 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	7afa      	ldrb	r2, [r7, #11]
 80052fe:	4611      	mov	r1, r2
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	4798      	blx	r3
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	e000      	b.n	8005314 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	460b      	mov	r3, r1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d16b      	bne.n	8005408 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3314      	adds	r3, #20
 8005334:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800533c:	2b02      	cmp	r3, #2
 800533e:	d156      	bne.n	80053ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	429a      	cmp	r2, r3
 800534a:	d914      	bls.n	8005376 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	461a      	mov	r2, r3
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 feda 	bl	800611c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005368:	2300      	movs	r3, #0
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 fabf 	bl	80068f2 <USBD_LL_PrepareReceive>
 8005374:	e03b      	b.n	80053ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d11c      	bne.n	80053bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800538a:	429a      	cmp	r2, r3
 800538c:	d316      	bcc.n	80053bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005398:	429a      	cmp	r2, r3
 800539a:	d20f      	bcs.n	80053bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800539c:	2200      	movs	r2, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 febb 	bl	800611c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053ae:	2300      	movs	r3, #0
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f001 fa9c 	bl	80068f2 <USBD_LL_PrepareReceive>
 80053ba:	e018      	b.n	80053ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d10b      	bne.n	80053e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f001 f9da 	bl	800679c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fecc 	bl	8006186 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d122      	bne.n	800543e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff fe98 	bl	800512e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005406:	e01a      	b.n	800543e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b03      	cmp	r3, #3
 8005412:	d114      	bne.n	800543e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	7afa      	ldrb	r2, [r7, #11]
 800542a:	4611      	mov	r1, r2
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	e000      	b.n	8005440 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005478:	2303      	movs	r3, #3
 800547a:	e02f      	b.n	80054dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	4611      	mov	r1, r2
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	2200      	movs	r2, #0
 80054aa:	2100      	movs	r1, #0
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 f94f 	bl	8006750 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2240      	movs	r2, #64	; 0x40
 80054be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	2200      	movs	r2, #0
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f941 	bl	8006750 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	b2da      	uxtb	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2204      	movs	r2, #4
 800551e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b04      	cmp	r3, #4
 8005542:	d106      	bne.n	8005552 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800554a:	b2da      	uxtb	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005572:	2303      	movs	r3, #3
 8005574:	e012      	b.n	800559c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d10b      	bne.n	800559a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055c2:	8a3b      	ldrh	r3, [r7, #16]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055d2:	89fb      	ldrh	r3, [r7, #14]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d005      	beq.n	8005606 <USBD_StdDevReq+0x26>
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d853      	bhi.n	80056a6 <USBD_StdDevReq+0xc6>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <USBD_StdDevReq+0x3a>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d14f      	bne.n	80056a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e04a      	b.n	80056b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b09      	cmp	r3, #9
 8005620:	d83b      	bhi.n	800569a <USBD_StdDevReq+0xba>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <USBD_StdDevReq+0x48>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800567d 	.word	0x0800567d
 800562c:	08005691 	.word	0x08005691
 8005630:	0800569b 	.word	0x0800569b
 8005634:	08005687 	.word	0x08005687
 8005638:	0800569b 	.word	0x0800569b
 800563c:	0800565b 	.word	0x0800565b
 8005640:	08005651 	.word	0x08005651
 8005644:	0800569b 	.word	0x0800569b
 8005648:	08005673 	.word	0x08005673
 800564c:	08005665 	.word	0x08005665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9de 	bl	8005a14 <USBD_GetDescriptor>
          break;
 8005658:	e024      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fb6d 	bl	8005d3c <USBD_SetAddress>
          break;
 8005662:	e01f      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbac 	bl	8005dc4 <USBD_SetConfig>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
          break;
 8005670:	e018      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc4b 	bl	8005f10 <USBD_GetConfig>
          break;
 800567a:	e013      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fc7c 	bl	8005f7c <USBD_GetStatus>
          break;
 8005684:	e00e      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fcab 	bl	8005fe4 <USBD_SetFeature>
          break;
 800568e:	e009      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fcba 	bl	800600c <USBD_ClrFeature>
          break;
 8005698:	e004      	b.n	80056a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fd11 	bl	80060c4 <USBD_CtlError>
          break;
 80056a2:	bf00      	nop
      }
      break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd0b 	bl	80060c4 <USBD_CtlError>
      break;
 80056ae:	bf00      	nop
  }

  return ret;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop

080056bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d005      	beq.n	80056e2 <USBD_StdItfReq+0x26>
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d82f      	bhi.n	800573a <USBD_StdItfReq+0x7e>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <USBD_StdItfReq+0x26>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d12b      	bne.n	800573a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d81d      	bhi.n	800572c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	889b      	ldrh	r3, [r3, #4]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d813      	bhi.n	8005722 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	88db      	ldrh	r3, [r3, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <USBD_StdItfReq+0x7a>
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10d      	bne.n	8005736 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fd20 	bl	8006160 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005720:	e009      	b.n	8005736 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fccd 	bl	80060c4 <USBD_CtlError>
          break;
 800572a:	e004      	b.n	8005736 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fcc8 	bl	80060c4 <USBD_CtlError>
          break;
 8005734:	e000      	b.n	8005738 <USBD_StdItfReq+0x7c>
          break;
 8005736:	bf00      	nop
      }
      break;
 8005738:	e004      	b.n	8005744 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fcc1 	bl	80060c4 <USBD_CtlError>
      break;
 8005742:	bf00      	nop
  }

  return ret;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	889b      	ldrh	r3, [r3, #4]
 8005760:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d007      	beq.n	800577e <USBD_StdEPReq+0x30>
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	f200 8145 	bhi.w	80059fe <USBD_StdEPReq+0x2b0>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <USBD_StdEPReq+0x44>
 8005778:	2b20      	cmp	r3, #32
 800577a:	f040 8140 	bne.w	80059fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e13a      	b.n	8005a08 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d007      	beq.n	80057aa <USBD_StdEPReq+0x5c>
 800579a:	2b03      	cmp	r3, #3
 800579c:	f300 8129 	bgt.w	80059f2 <USBD_StdEPReq+0x2a4>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d07f      	beq.n	80058a4 <USBD_StdEPReq+0x156>
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d03c      	beq.n	8005822 <USBD_StdEPReq+0xd4>
 80057a8:	e123      	b.n	80059f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d002      	beq.n	80057bc <USBD_StdEPReq+0x6e>
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d016      	beq.n	80057e8 <USBD_StdEPReq+0x9a>
 80057ba:	e02c      	b.n	8005816 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <USBD_StdEPReq+0x90>
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d00a      	beq.n	80057de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 ffe5 	bl	800679c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 ffe1 	bl	800679c <USBD_LL_StallEP>
 80057da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057dc:	e020      	b.n	8005820 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc6f 	bl	80060c4 <USBD_CtlError>
              break;
 80057e6:	e01b      	b.n	8005820 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	885b      	ldrh	r3, [r3, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <USBD_StdEPReq+0xc0>
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d008      	beq.n	800580e <USBD_StdEPReq+0xc0>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	88db      	ldrh	r3, [r3, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 ffc7 	bl	800679c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fca6 	bl	8006160 <USBD_CtlSendStatus>

              break;
 8005814:	e004      	b.n	8005820 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fc53 	bl	80060c4 <USBD_CtlError>
              break;
 800581e:	bf00      	nop
          }
          break;
 8005820:	e0ec      	b.n	80059fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d002      	beq.n	8005834 <USBD_StdEPReq+0xe6>
 800582e:	2b03      	cmp	r3, #3
 8005830:	d016      	beq.n	8005860 <USBD_StdEPReq+0x112>
 8005832:	e030      	b.n	8005896 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <USBD_StdEPReq+0x108>
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d00a      	beq.n	8005856 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 ffa9 	bl	800679c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 ffa5 	bl	800679c <USBD_LL_StallEP>
 8005852:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005854:	e025      	b.n	80058a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fc33 	bl	80060c4 <USBD_CtlError>
              break;
 800585e:	e020      	b.n	80058a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	885b      	ldrh	r3, [r3, #2]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11b      	bne.n	80058a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 ffaf 	bl	80067da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fc6f 	bl	8006160 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4798      	blx	r3
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005894:	e004      	b.n	80058a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fc13 	bl	80060c4 <USBD_CtlError>
              break;
 800589e:	e000      	b.n	80058a2 <USBD_StdEPReq+0x154>
              break;
 80058a0:	bf00      	nop
          }
          break;
 80058a2:	e0ab      	b.n	80059fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d002      	beq.n	80058b6 <USBD_StdEPReq+0x168>
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d032      	beq.n	800591a <USBD_StdEPReq+0x1cc>
 80058b4:	e097      	b.n	80059e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <USBD_StdEPReq+0x17e>
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d004      	beq.n	80058cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fbfd 	bl	80060c4 <USBD_CtlError>
                break;
 80058ca:	e091      	b.n	80059f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da0b      	bge.n	80058ec <USBD_StdEPReq+0x19e>
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	3310      	adds	r3, #16
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	3304      	adds	r3, #4
 80058ea:	e00b      	b.n	8005904 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2202      	movs	r2, #2
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fbe7 	bl	80060e6 <USBD_CtlSendData>
              break;
 8005918:	e06a      	b.n	80059f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800591a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800591e:	2b00      	cmp	r3, #0
 8005920:	da11      	bge.n	8005946 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	f003 020f 	and.w	r2, r3, #15
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	3324      	adds	r3, #36	; 0x24
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d117      	bne.n	800596c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fbc0 	bl	80060c4 <USBD_CtlError>
                  break;
 8005944:	e054      	b.n	80059f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005946:	7bbb      	ldrb	r3, [r7, #14]
 8005948:	f003 020f 	and.w	r2, r3, #15
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fbad 	bl	80060c4 <USBD_CtlError>
                  break;
 800596a:	e041      	b.n	80059f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800596c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005970:	2b00      	cmp	r3, #0
 8005972:	da0b      	bge.n	800598c <USBD_StdEPReq+0x23e>
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	3310      	adds	r3, #16
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	e00b      	b.n	80059a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x264>
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d103      	bne.n	80059ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e00e      	b.n	80059d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 ff2a 	bl	8006818 <USBD_LL_IsStallEP>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e002      	b.n	80059d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2202      	movs	r2, #2
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fb81 	bl	80060e6 <USBD_CtlSendData>
              break;
 80059e4:	e004      	b.n	80059f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb6b 	bl	80060c4 <USBD_CtlError>
              break;
 80059ee:	bf00      	nop
          }
          break;
 80059f0:	e004      	b.n	80059fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb65 	bl	80060c4 <USBD_CtlError>
          break;
 80059fa:	bf00      	nop
      }
      break;
 80059fc:	e004      	b.n	8005a08 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fb5f 	bl	80060c4 <USBD_CtlError>
      break;
 8005a06:	bf00      	nop
  }

  return ret;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	885b      	ldrh	r3, [r3, #2]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2b0e      	cmp	r3, #14
 8005a36:	f200 8152 	bhi.w	8005cde <USBD_GetDescriptor+0x2ca>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <USBD_GetDescriptor+0x2c>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005ab1 	.word	0x08005ab1
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005b09 	.word	0x08005b09
 8005a4c:	08005cdf 	.word	0x08005cdf
 8005a50:	08005cdf 	.word	0x08005cdf
 8005a54:	08005c7f 	.word	0x08005c7f
 8005a58:	08005cab 	.word	0x08005cab
 8005a5c:	08005cdf 	.word	0x08005cdf
 8005a60:	08005cdf 	.word	0x08005cdf
 8005a64:	08005cdf 	.word	0x08005cdf
 8005a68:	08005cdf 	.word	0x08005cdf
 8005a6c:	08005cdf 	.word	0x08005cdf
 8005a70:	08005cdf 	.word	0x08005cdf
 8005a74:	08005cdf 	.word	0x08005cdf
 8005a78:	08005a7d 	.word	0x08005a7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	7c12      	ldrb	r2, [r2, #16]
 8005a94:	f107 0108 	add.w	r1, r7, #8
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
 8005a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a9e:	e126      	b.n	8005cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb0e 	bl	80060c4 <USBD_CtlError>
        err++;
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	72fb      	strb	r3, [r7, #11]
      break;
 8005aae:	e11e      	b.n	8005cee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	7c12      	ldrb	r2, [r2, #16]
 8005abc:	f107 0108 	add.w	r1, r7, #8
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
 8005ac4:	60f8      	str	r0, [r7, #12]
      break;
 8005ac6:	e112      	b.n	8005cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7c1b      	ldrb	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f107 0208 	add.w	r2, r7, #8
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
 8005ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005aea:	e100      	b.n	8005cee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	f107 0208 	add.w	r2, r7, #8
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
 8005afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	2202      	movs	r2, #2
 8005b04:	701a      	strb	r2, [r3, #0]
      break;
 8005b06:	e0f2      	b.n	8005cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	885b      	ldrh	r3, [r3, #2]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b05      	cmp	r3, #5
 8005b10:	f200 80ac 	bhi.w	8005c6c <USBD_GetDescriptor+0x258>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <USBD_GetDescriptor+0x108>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b35 	.word	0x08005b35
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005bd1 	.word	0x08005bd1
 8005b2c:	08005c05 	.word	0x08005c05
 8005b30:	08005c39 	.word	0x08005c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	7c12      	ldrb	r2, [r2, #16]
 8005b4c:	f107 0108 	add.w	r1, r7, #8
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
 8005b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b56:	e091      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fab2 	bl	80060c4 <USBD_CtlError>
            err++;
 8005b60:	7afb      	ldrb	r3, [r7, #11]
 8005b62:	3301      	adds	r3, #1
 8005b64:	72fb      	strb	r3, [r7, #11]
          break;
 8005b66:	e089      	b.n	8005c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	7c12      	ldrb	r2, [r2, #16]
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b8a:	e077      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa98 	bl	80060c4 <USBD_CtlError>
            err++;
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	3301      	adds	r3, #1
 8005b98:	72fb      	strb	r3, [r7, #11]
          break;
 8005b9a:	e06f      	b.n	8005c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bbe:	e05d      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa7e 	bl	80060c4 <USBD_CtlError>
            err++;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bce:	e055      	b.n	8005c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	7c12      	ldrb	r2, [r2, #16]
 8005be8:	f107 0108 	add.w	r1, r7, #8
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bf2:	e043      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa64 	bl	80060c4 <USBD_CtlError>
            err++;
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	72fb      	strb	r3, [r7, #11]
          break;
 8005c02:	e03b      	b.n	8005c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	7c12      	ldrb	r2, [r2, #16]
 8005c1c:	f107 0108 	add.w	r1, r7, #8
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
 8005c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c26:	e029      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa4a 	bl	80060c4 <USBD_CtlError>
            err++;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	3301      	adds	r3, #1
 8005c34:	72fb      	strb	r3, [r7, #11]
          break;
 8005c36:	e021      	b.n	8005c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7c12      	ldrb	r2, [r2, #16]
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5a:	e00f      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa30 	bl	80060c4 <USBD_CtlError>
            err++;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	3301      	adds	r3, #1
 8005c68:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6a:	e007      	b.n	8005c7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa28 	bl	80060c4 <USBD_CtlError>
          err++;
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	3301      	adds	r3, #1
 8005c78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005c7a:	bf00      	nop
      }
      break;
 8005c7c:	e037      	b.n	8005cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7c1b      	ldrb	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8e:	f107 0208 	add.w	r2, r7, #8
 8005c92:	4610      	mov	r0, r2
 8005c94:	4798      	blx	r3
 8005c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c98:	e029      	b.n	8005cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa11 	bl	80060c4 <USBD_CtlError>
        err++;
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ca8:	e021      	b.n	8005cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	7c1b      	ldrb	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10d      	bne.n	8005cce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f107 0208 	add.w	r2, r7, #8
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4798      	blx	r3
 8005cc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	2207      	movs	r2, #7
 8005cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ccc:	e00f      	b.n	8005cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9f7 	bl	80060c4 <USBD_CtlError>
        err++;
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	72fb      	strb	r3, [r7, #11]
      break;
 8005cdc:	e007      	b.n	8005cee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f9ef 	bl	80060c4 <USBD_CtlError>
      err++;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	72fb      	strb	r3, [r7, #11]
      break;
 8005cec:	bf00      	nop
  }

  if (err != 0U)
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11e      	bne.n	8005d32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	88db      	ldrh	r3, [r3, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d016      	beq.n	8005d2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00e      	beq.n	8005d20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	88da      	ldrh	r2, [r3, #6]
 8005d06:	893b      	ldrh	r3, [r7, #8]
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	bf28      	it	cs
 8005d0c:	4613      	movcs	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d12:	893b      	ldrh	r3, [r7, #8]
 8005d14:	461a      	mov	r2, r3
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f9e4 	bl	80060e6 <USBD_CtlSendData>
 8005d1e:	e009      	b.n	8005d34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9ce 	bl	80060c4 <USBD_CtlError>
 8005d28:	e004      	b.n	8005d34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa18 	bl	8006160 <USBD_CtlSendStatus>
 8005d30:	e000      	b.n	8005d34 <USBD_GetDescriptor+0x320>
    return;
 8005d32:	bf00      	nop
  }
}
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	889b      	ldrh	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d131      	bne.n	8005db2 <USBD_SetAddress+0x76>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	88db      	ldrh	r3, [r3, #6]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12d      	bne.n	8005db2 <USBD_SetAddress+0x76>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	885b      	ldrh	r3, [r3, #2]
 8005d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5c:	d829      	bhi.n	8005db2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d104      	bne.n	8005d80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f9a3 	bl	80060c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7e:	e01d      	b.n	8005dbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fd70 	bl	8006872 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9e4 	bl	8006160 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da6:	e009      	b.n	8005dbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db0:	e004      	b.n	8005dbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f985 	bl	80060c4 <USBD_CtlError>
  }
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	885b      	ldrh	r3, [r3, #2]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	; (8005f0c <USBD_SetConfig+0x148>)
 8005dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ddc:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <USBD_SetConfig+0x148>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d905      	bls.n	8005df0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f96c 	bl	80060c4 <USBD_CtlError>
    return USBD_FAIL;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e088      	b.n	8005f02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d002      	beq.n	8005e02 <USBD_SetConfig+0x3e>
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d025      	beq.n	8005e4c <USBD_SetConfig+0x88>
 8005e00:	e071      	b.n	8005ee6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e02:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01c      	beq.n	8005e44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005e0a:	4b40      	ldr	r3, [pc, #256]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e14:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff f992 	bl	8005144 <USBD_SetClassConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f949 	bl	80060c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e32:	e065      	b.n	8005f00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f993 	bl	8006160 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005e42:	e05d      	b.n	8005f00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f98b 	bl	8006160 <USBD_CtlSendStatus>
      break;
 8005e4a:	e059      	b.n	8005f00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d112      	bne.n	8005e7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff f985 	bl	800517c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f974 	bl	8006160 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e78:	e042      	b.n	8005f00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005e7a:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d02a      	beq.n	8005ede <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff f973 	bl	800517c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <USBD_SetConfig+0x148>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <USBD_SetConfig+0x148>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff f94c 	bl	8005144 <USBD_SetClassConfig>
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00f      	beq.n	8005ed6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f903 	bl	80060c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff f958 	bl	800517c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ed4:	e014      	b.n	8005f00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f942 	bl	8006160 <USBD_CtlSendStatus>
      break;
 8005edc:	e010      	b.n	8005f00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f93e 	bl	8006160 <USBD_CtlSendStatus>
      break;
 8005ee4:	e00c      	b.n	8005f00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f8eb 	bl	80060c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <USBD_SetConfig+0x148>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff f941 	bl	800517c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005efa:	2303      	movs	r3, #3
 8005efc:	73fb      	strb	r3, [r7, #15]
      break;
 8005efe:	bf00      	nop
  }

  return ret;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200000dc 	.word	0x200000dc

08005f10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d004      	beq.n	8005f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8cd 	bl	80060c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f2a:	e023      	b.n	8005f74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	dc02      	bgt.n	8005f3e <USBD_GetConfig+0x2e>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dc03      	bgt.n	8005f44 <USBD_GetConfig+0x34>
 8005f3c:	e015      	b.n	8005f6a <USBD_GetConfig+0x5a>
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d00b      	beq.n	8005f5a <USBD_GetConfig+0x4a>
 8005f42:	e012      	b.n	8005f6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8c7 	bl	80060e6 <USBD_CtlSendData>
        break;
 8005f58:	e00c      	b.n	8005f74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8bf 	bl	80060e6 <USBD_CtlSendData>
        break;
 8005f68:	e004      	b.n	8005f74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8a9 	bl	80060c4 <USBD_CtlError>
        break;
 8005f72:	bf00      	nop
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d81e      	bhi.n	8005fd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	88db      	ldrh	r3, [r3, #6]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d004      	beq.n	8005fa6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f890 	bl	80060c4 <USBD_CtlError>
        break;
 8005fa4:	e01a      	b.n	8005fdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f043 0202 	orr.w	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f88b 	bl	80060e6 <USBD_CtlSendData>
      break;
 8005fd0:	e004      	b.n	8005fdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f875 	bl	80060c4 <USBD_CtlError>
      break;
 8005fda:	bf00      	nop
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	885b      	ldrh	r3, [r3, #2]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d106      	bne.n	8006004 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8ae 	bl	8006160 <USBD_CtlSendStatus>
  }
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	2b02      	cmp	r3, #2
 8006022:	d80b      	bhi.n	800603c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	885b      	ldrh	r3, [r3, #2]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10c      	bne.n	8006046 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f893 	bl	8006160 <USBD_CtlSendStatus>
      }
      break;
 800603a:	e004      	b.n	8006046 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f840 	bl	80060c4 <USBD_CtlError>
      break;
 8006044:	e000      	b.n	8006048 <USBD_ClrFeature+0x3c>
      break;
 8006046:	bf00      	nop
  }
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff fa92 	bl	80055a4 <SWAPBYTE>
 8006080:	4603      	mov	r3, r0
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff fa85 	bl	80055a4 <SWAPBYTE>
 800609a:	4603      	mov	r3, r0
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fa78 	bl	80055a4 <SWAPBYTE>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	80da      	strh	r2, [r3, #6]
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ce:	2180      	movs	r1, #128	; 0x80
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fb63 	bl	800679c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060d6:	2100      	movs	r1, #0
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb5f 	bl	800679c <USBD_LL_StallEP>
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	2100      	movs	r1, #0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fbcf 	bl	80068b0 <USBD_LL_Transmit>

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	2100      	movs	r1, #0
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fbbe 	bl	80068b0 <USBD_LL_Transmit>

  return USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	2100      	movs	r1, #0
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fbce 	bl	80068f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2204      	movs	r2, #4
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006170:	2300      	movs	r3, #0
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb9a 	bl	80068b0 <USBD_LL_Transmit>

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2205      	movs	r2, #5
 8006192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006196:	2300      	movs	r3, #0
 8006198:	2200      	movs	r2, #0
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fba8 	bl	80068f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <SysTick_Handler+0x1c>)
 80061b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80061b4:	f000 f996 	bl	80064e4 <xTaskGetSchedulerState>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d001      	beq.n	80061c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80061be:	f000 f9fb 	bl	80065b8 <xPortSysTickHandler>
  }
}
 80061c2:	bf00      	nop
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	e000e010 	.word	0xe000e010

080061cc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6892      	ldr	r2, [r2, #8]
 800622a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6852      	ldr	r2, [r2, #4]
 8006234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d103      	bne.n	8006248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006272:	4b4f      	ldr	r3, [pc, #316]	; (80063b0 <xTaskIncrementTick+0x148>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 808f 	bne.w	800639a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800627c:	4b4d      	ldr	r3, [pc, #308]	; (80063b4 <xTaskIncrementTick+0x14c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006284:	4a4b      	ldr	r2, [pc, #300]	; (80063b4 <xTaskIncrementTick+0x14c>)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d120      	bne.n	80062d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006290:	4b49      	ldr	r3, [pc, #292]	; (80063b8 <xTaskIncrementTick+0x150>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xTaskIncrementTick+0x46>
 80062b0:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <xTaskIncrementTick+0x150>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	4b41      	ldr	r3, [pc, #260]	; (80063bc <xTaskIncrementTick+0x154>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <xTaskIncrementTick+0x150>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	4a3f      	ldr	r2, [pc, #252]	; (80063bc <xTaskIncrementTick+0x154>)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <xTaskIncrementTick+0x158>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	4a3d      	ldr	r2, [pc, #244]	; (80063c0 <xTaskIncrementTick+0x158>)
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	f000 f8e9 	bl	80064a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062d2:	4b3c      	ldr	r3, [pc, #240]	; (80063c4 <xTaskIncrementTick+0x15c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d349      	bcc.n	8006370 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062dc:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <xTaskIncrementTick+0x150>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	4b37      	ldr	r3, [pc, #220]	; (80063c4 <xTaskIncrementTick+0x15c>)
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ec:	601a      	str	r2, [r3, #0]
					break;
 80062ee:	e03f      	b.n	8006370 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f0:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <xTaskIncrementTick+0x150>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d203      	bcs.n	8006310 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006308:	4a2e      	ldr	r2, [pc, #184]	; (80063c4 <xTaskIncrementTick+0x15c>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800630e:	e02f      	b.n	8006370 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	3304      	adds	r3, #4
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff ff7d 	bl	8006214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3318      	adds	r3, #24
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff74 	bl	8006214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <xTaskIncrementTick+0x160>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d903      	bls.n	8006340 <xTaskIncrementTick+0xd8>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <xTaskIncrementTick+0x160>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <xTaskIncrementTick+0x164>)
 800634e:	441a      	add	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f7ff ff38 	bl	80061cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <xTaskIncrementTick+0x168>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d3b8      	bcc.n	80062dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636e:	e7b5      	b.n	80062dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xTaskIncrementTick+0x168>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	4915      	ldr	r1, [pc, #84]	; (80063cc <xTaskIncrementTick+0x164>)
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d901      	bls.n	800638c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800638c:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <xTaskIncrementTick+0x16c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e004      	b.n	80063a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskIncrementTick+0x170>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	4a0d      	ldr	r2, [pc, #52]	; (80063d8 <xTaskIncrementTick+0x170>)
 80063a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063a4:	697b      	ldr	r3, [r7, #20]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000568 	.word	0x20000568
 80063b4:	2000054c 	.word	0x2000054c
 80063b8:	20000544 	.word	0x20000544
 80063bc:	20000548 	.word	0x20000548
 80063c0:	20000560 	.word	0x20000560
 80063c4:	20000564 	.word	0x20000564
 80063c8:	20000550 	.word	0x20000550
 80063cc:	200000e4 	.word	0x200000e4
 80063d0:	200000e0 	.word	0x200000e0
 80063d4:	2000055c 	.word	0x2000055c
 80063d8:	20000558 	.word	0x20000558

080063dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <vTaskSwitchContext+0xb0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ea:	4b29      	ldr	r3, [pc, #164]	; (8006490 <vTaskSwitchContext+0xb4>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063f0:	e046      	b.n	8006480 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063f2:	4b27      	ldr	r3, [pc, #156]	; (8006490 <vTaskSwitchContext+0xb4>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f8:	4b26      	ldr	r3, [pc, #152]	; (8006494 <vTaskSwitchContext+0xb8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e010      	b.n	8006422 <vTaskSwitchContext+0x46>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <vTaskSwitchContext+0x40>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	607b      	str	r3, [r7, #4]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <vTaskSwitchContext+0x3e>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3b01      	subs	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	491d      	ldr	r1, [pc, #116]	; (8006498 <vTaskSwitchContext+0xbc>)
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0e4      	beq.n	8006400 <vTaskSwitchContext+0x24>
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <vTaskSwitchContext+0xbc>)
 8006442:	4413      	add	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3308      	adds	r3, #8
 8006458:	429a      	cmp	r2, r3
 800645a:	d104      	bne.n	8006466 <vTaskSwitchContext+0x8a>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4a0b      	ldr	r2, [pc, #44]	; (800649c <vTaskSwitchContext+0xc0>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4a08      	ldr	r2, [pc, #32]	; (8006494 <vTaskSwitchContext+0xb8>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006476:	4b09      	ldr	r3, [pc, #36]	; (800649c <vTaskSwitchContext+0xc0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3354      	adds	r3, #84	; 0x54
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <vTaskSwitchContext+0xc4>)
 800647e:	6013      	str	r3, [r2, #0]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20000568 	.word	0x20000568
 8006490:	2000055c 	.word	0x2000055c
 8006494:	20000550 	.word	0x20000550
 8006498:	200000e4 	.word	0x200000e4
 800649c:	200000e0 	.word	0x200000e0
 80064a0:	2000000c 	.word	0x2000000c

080064a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <prvResetNextTaskUnblockTime+0x38>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064b4:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <prvResetNextTaskUnblockTime+0x3c>)
 80064b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064bc:	e008      	b.n	80064d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <prvResetNextTaskUnblockTime+0x38>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a04      	ldr	r2, [pc, #16]	; (80064e0 <prvResetNextTaskUnblockTime+0x3c>)
 80064ce:	6013      	str	r3, [r2, #0]
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20000544 	.word	0x20000544
 80064e0:	20000564 	.word	0x20000564

080064e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <xTaskGetSchedulerState+0x34>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064f2:	2301      	movs	r3, #1
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	e008      	b.n	800650a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <xTaskGetSchedulerState+0x38>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006500:	2302      	movs	r3, #2
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	e001      	b.n	800650a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800650a:	687b      	ldr	r3, [r7, #4]
	}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000554 	.word	0x20000554
 800651c:	20000568 	.word	0x20000568

08006520 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <pxCurrentTCBConst2>)
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f380 8809 	msr	PSP, r0
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	4770      	bx	lr
 800653c:	f3af 8000 	nop.w

08006540 <pxCurrentTCBConst2>:
 8006540:	200000e0 	.word	0x200000e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7ff ff2c 	bl	80063dc <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	200000e0 	.word	0x200000e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7ff fe49 	bl	8006268 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <xPortSysTickHandler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fe fdca 	bl	80051ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	440b      	add	r3, r1
 8006640:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	4619      	mov	r1, r3
 800664a:	f7fe fe04 	bl	8005256 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	440b      	add	r3, r1
 8006676:	333c      	adds	r3, #60	; 0x3c
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	4619      	mov	r1, r3
 800667e:	f7fe fe4d 	bl	800531c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe ff61 	bl	8005560 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d001      	beq.n	80066be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80066ba:	f7f9 fe47 	bl	800034c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80066c4:	7bfa      	ldrb	r2, [r7, #15]
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe ff0b 	bl	80054e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe feb7 	bl	8005448 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe ff06 	bl	8005504 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <HAL_PCD_SuspendCallback+0x30>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	4a03      	ldr	r2, [pc, #12]	; (8006714 <HAL_PCD_SuspendCallback+0x30>)
 8006706:	f043 0306 	orr.w	r3, r3, #6
 800670a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed00 	.word	0xe000ed00

08006718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <HAL_PCD_ResumeCallback+0x34>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4a07      	ldr	r2, [pc, #28]	; (800674c <HAL_PCD_ResumeCallback+0x34>)
 800672e:	f023 0306 	bic.w	r3, r3, #6
 8006732:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006734:	f000 f934 	bl	80069a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fef6 	bl	8005530 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	e000ed00 	.word	0xe000ed00

08006750 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	4603      	mov	r3, r0
 8006760:	70fb      	strb	r3, [r7, #3]
 8006762:	460b      	mov	r3, r1
 8006764:	70bb      	strb	r3, [r7, #2]
 8006766:	4613      	mov	r3, r2
 8006768:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006778:	78bb      	ldrb	r3, [r7, #2]
 800677a:	883a      	ldrh	r2, [r7, #0]
 800677c:	78f9      	ldrb	r1, [r7, #3]
 800677e:	f7fa f8de 	bl	800093e <HAL_PCD_EP_Open>
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f90f 	bl	80069ac <USBD_Get_USB_Status>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006792:	7bbb      	ldrb	r3, [r7, #14]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fa f9a5 	bl	8000b0a <HAL_PCD_EP_SetStall>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f8f0 	bl	80069ac <USBD_Get_USB_Status>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fa f9d8 	bl	8000bae <HAL_PCD_EP_ClrStall>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f8d1 	bl	80069ac <USBD_Get_USB_Status>
 800680a:	4603      	mov	r3, r0
 800680c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800680e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800682a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800682c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da0c      	bge.n	800684e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	440b      	add	r3, r1
 8006848:	3302      	adds	r3, #2
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	e00b      	b.n	8006866 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	440b      	add	r3, r1
 8006860:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006864:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f7fa f82f 	bl	80008f4 <HAL_PCD_SetAddress>
 8006896:	4603      	mov	r3, r0
 8006898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f885 	bl	80069ac <USBD_Get_USB_Status>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80068ce:	7af9      	ldrb	r1, [r7, #11]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	f7fa f8d6 	bl	8000a84 <HAL_PCD_EP_Transmit>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f864 	bl	80069ac <USBD_Get_USB_Status>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80068e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	460b      	mov	r3, r1
 8006900:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006910:	7af9      	ldrb	r1, [r7, #11]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	f7fa f878 	bl	8000a0a <HAL_PCD_EP_Receive>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f843 	bl	80069ac <USBD_Get_USB_Status>
 8006926:	4603      	mov	r3, r0
 8006928:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800692a:	7dbb      	ldrb	r3, [r7, #22]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_PCDEx_LPM_Callback+0x18>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d013      	beq.n	8006972 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800694a:	e023      	b.n	8006994 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006954:	f000 f824 	bl	80069a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006958:	4b10      	ldr	r3, [pc, #64]	; (800699c <HAL_PCDEx_LPM_Callback+0x68>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	4a0f      	ldr	r2, [pc, #60]	; (800699c <HAL_PCDEx_LPM_Callback+0x68>)
 800695e:	f023 0306 	bic.w	r3, r3, #6
 8006962:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fde0 	bl	8005530 <USBD_LL_Resume>
    break;
 8006970:	e010      	b.n	8006994 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fdc3 	bl	8005504 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006986:	4b05      	ldr	r3, [pc, #20]	; (800699c <HAL_PCDEx_LPM_Callback+0x68>)
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <HAL_PCDEx_LPM_Callback+0x68>)
 800698c:	f043 0306 	orr.w	r3, r3, #6
 8006990:	6113      	str	r3, [r2, #16]
    break;
 8006992:	bf00      	nop
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80069a4:	f7f9 fc71 	bl	800028a <SystemClock_Config>
}
 80069a8:	bf00      	nop
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d817      	bhi.n	80069f0 <USBD_Get_USB_Status+0x44>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <USBD_Get_USB_Status+0x1c>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	080069df 	.word	0x080069df
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069eb 	.word	0x080069eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
    break;
 80069dc:	e00b      	b.n	80069f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
    break;
 80069e2:	e008      	b.n	80069f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
    break;
 80069e8:	e005      	b.n	80069f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069ea:	2303      	movs	r3, #3
 80069ec:	73fb      	strb	r3, [r7, #15]
    break;
 80069ee:	e002      	b.n	80069f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80069f0:	2303      	movs	r3, #3
 80069f2:	73fb      	strb	r3, [r7, #15]
    break;
 80069f4:	bf00      	nop
  }
  return usb_status;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	; (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	; (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	; (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	; (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 f820 	bl	8006a5c <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08006aec 	.word	0x08006aec
 8006a40:	08006aec 	.word	0x08006aec
 8006a44:	08006aec 	.word	0x08006aec
 8006a48:	08006af0 	.word	0x08006af0

08006a4c <memset>:
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
